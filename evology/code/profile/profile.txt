         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   86.440541  9.986572e-06  ...    1.171463  110.217204      NaN
1        1.0   94.305569 -4.270114e-07  ...    1.424333  110.486666      NaN
2        2.0   96.301539  4.824251e-06  ...    1.609695  111.551636      NaN
3        3.0  100.567033  4.896079e-06  ...    1.796571  112.364794      NaN
4        4.0  101.380892 -8.208677e-06  ...    1.919435  111.988606      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  417.111262  4.048429e+07  ...   40.424425  114.912104      NaN
9996  9996.0  405.085494  2.421439e-06  ...   40.300894  114.244377      NaN
9997  9997.0  429.935147 -1.244247e-06  ...   40.289004  115.095428      NaN
9998  9998.0  490.264452  7.450581e-09  ...   40.187604  115.537112      NaN
9999  9999.0  559.393182 -7.003546e-07  ...   40.134350  115.244411      NaN

[10000 rows x 70 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 6.51184 s
File: profile/profile.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def main(
    11                                               space,
    12                                               solver,
    13                                               wealth_coordinates,
    14                                               POPULATION_SIZE,
    15                                               MAX_GENERATIONS,
    16                                               PROBA_SELECTION,
    17                                               MUTATION_RATE,
    18                                               tqdm_display,
    19                                               reset_wealth,
    20                                           ):
    21                                               # Initialisation
    22         1          9.0      9.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    23         1       1292.0   1292.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    24         1          3.0      3.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    25                                           
    26                                               # Population creation
    27         1      26743.0  26743.0      0.4      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    28                                           
    29     10002      58229.0      5.8      0.9      for generation in tqdm(
    30         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    31                                               ):
    32     10000      13006.0      1.3      0.2          if CurrentPrice >= 1_000_000:
    33                                                       warnings.warn('Simulation break: price above 1M.')
    34                                                       break
    35                                           
    36                                                   # Population reset
    37     10000      19521.0      2.0      0.3          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    38                                           
    39                                                   # Hypermutation
    40                                                   
    41     20000      40652.0      2.0      0.6          pop, replacements, spoils = ga.hypermutate(
    42     10000      12550.0      1.3      0.2              pop, spoils, replace
    43                                                   ) 
    44     10000      12954.0      1.3      0.2          if replacements < 0:
    45                                                       break
    46                                           
    47                                           
    48                                                   # Strategy evolution
    49                                                   #pop = fit.ComputeFitness(pop, 252)
    50                                           
    51                                                   #pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    52                                                   #    pop,
    53                                                   #    space,
    54                                                   #    generation,
    55                                                   #    wealth_coordinates,
    56                                                   #    PROBA_SELECTION,
    57                                                   #    MUTATION_RATE,
    58                                                   #    252,
    59                                                   #)
    60                                           
    61                                                   # Market decisions 
    62     10000      51311.0      5.1      0.8          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    63     10000     711594.0     71.2     10.9          pop = bsc.NoiseProcess(pop)
    64     10000     192348.0     19.2      3.0          pop = bsc.UpdateFval(pop, dividend)
    65     10000     300118.0     30.0      4.6          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    66                                                   #pop = bsc.DetermineEDF(pop)
    67                                                   
    68                                           
    69                                                   # Market clearing
    70                                                   #'''
    71                                                   #pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72                                                   #    pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   #)
    74                                                   #'''
    75     10000     513987.0     51.4      7.9          CurrentPrice, ToLiquidate = lc.linear_solver(pop, spoils, volume, CurrentPrice)
    76     10000      14284.0      1.4      0.2          price_history = lc.UpdatePriceHistory(price_history, CurrentPrice)
    77     10000    1474263.0    147.4     22.6          pop, mismatch = bsc.CalculateEDV(pop, CurrentPrice)
    78                                           
    79                                                   # Market activity
    80     10000      13453.0      1.3      0.2          (
    81     10000      12785.0      1.3      0.2              pop,
    82     10000      12403.0      1.2      0.2              volume,
    83     10000      12469.0      1.2      0.2              dividend,
    84     10000      12532.0      1.3      0.2              random_dividend,
    85     10000      12542.0      1.3      0.2              dividend_history,
    86     10000      12559.0      1.3      0.2              spoils,
    87     10000      12478.0      1.2      0.2              Liquidations,
    88     20000     628759.0     31.4      9.7          ) = mk.MarketActivity(
    89     10000      12586.0      1.3      0.2              pop,
    90     10000      12595.0      1.3      0.2              CurrentPrice,
    91     10000      12400.0      1.2      0.2              asset_supply,
    92     10000      12387.0      1.2      0.2              dividend,
    93     10000      12400.0      1.2      0.2              dividend_history,
    94     10000      12413.0      1.2      0.2              spoils,
    95     10000      12382.0      1.2      0.2              ToLiquidate,
    96     10000      12736.0      1.3      0.2              random_dividend_history
    97                                                   )
    98     10000      57247.0      5.7      0.9          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    99     10000      15669.0      1.6      0.2          pop = bsc.UpdateQuarterlyWealth(pop, generation)
   100     10000     410373.0     41.0      6.3          pop = bsc.UpdateWealthSeries(pop)
   101                                           
   102     10000    1136678.0    113.7     17.5          pop = iv.Emp_Investment(pop)
   103     10000      14161.0      1.4      0.2          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   104                                           
   105                                                   # Record results 
   106     20000     388989.0     19.4      6.0          results, sim_break = data.record_results(
   107     10000      12734.0      1.3      0.2              results,
   108     10000      12596.0      1.3      0.2              generation,
   109     10000      12450.0      1.2      0.2              CurrentPrice,
   110     10000      12551.0      1.3      0.2              mismatch,
   111     10000      12528.0      1.3      0.2              dividend,
   112     10000      12524.0      1.3      0.2              random_dividend,
   113     10000      12468.0      1.2      0.2              volume,
   114     10000      12466.0      1.2      0.2              replacements,
   115     10000      12450.0      1.2      0.2              pop,
   116     10000      12495.0      1.2      0.2              spoils,
   117     10000      12523.0      1.3      0.2              Liquidations,
   118     10000      12571.0      1.3      0.2              asset_supply,
   119                                                       #CountSelected,
   120                                                       #CountMutated,
   121                                                       #CountCrossed,
   122                                                       #StratFlow,
   123     10000      12594.0      1.3      0.2              AvgT,
   124     10000      12638.0      1.3      0.2              PropSignif,
   125     10000      12586.0      1.3      0.2              HighestT,
   126     10000      12451.0      1.2      0.2              AvgAbsT,
   127                                                   )
   128                                           
   129     10000      13869.0      1.4      0.2          if sim_break == True:
   130                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   131                                                       break
   132                                           
   133         1          3.0      3.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   134         1          7.0      7.0      0.0          results = results[0:generation+1]
   135                                           
   136         1       1472.0   1472.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   137                                           
   138         1          1.0      1.0      0.0      return df, pop

