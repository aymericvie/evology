       Gen  Price      Mismatch  Dividends  ...  NTflows  VIflows  TFflows  AvgAge
0      0.0  87.06 -3.493684e+04   0.004133  ...      0.0      0.0      0.0     1.0
1      1.0  85.33  2.528594e+04   0.004142  ...      0.0      0.0      0.0    23.0
2      2.0  84.82  1.858586e+04   0.004155  ...      0.0      0.0      0.0    24.0
3      3.0  85.64  2.158000e+02   0.004179  ...      0.0      0.0      0.0    25.0
4      4.0  87.40  6.907246e+03   0.004190  ...      0.0      0.0      0.0    26.0
..     ...    ...           ...        ...  ...      ...      ...      ...     ...
974  974.0  76.49  1.449463e+06   0.003868  ...      0.0      0.0      0.0   996.0
975  975.0  77.36  8.202244e+05   0.003846  ...      0.0      0.0      0.0   997.0
976  976.0  74.56 -3.313355e+06   0.003843  ...      0.0      0.0      0.0   998.0
977  977.0  70.81 -3.183726e+06   0.003831  ...      0.0      0.0      0.0   999.0
978  978.0  69.23 -3.816036e+06   0.003804  ...      0.0      0.0      0.0  1000.0

[979 rows x 83 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 13.2434 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               ReinvestmentRate,
    21                                               InvestmentHorizon,
    22                                               InvestorBehavior,
    23                                               tqdm_display,
    24                                               reset_wealth
    25                                           ):
    26                                               # Initialise important variables and dataframe to store results
    27         1          1.0      1.0      0.0      ReturnsNT, ReturnsVI, ReturnsTF = (
    28         1        188.0    188.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29         1        177.0    177.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30         1        176.0    176.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    31                                               )
    32         1          2.0      2.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    33         1        148.0    148.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    34         1        181.0    181.0      0.0      wealth_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    35         1        197.0    197.0      0.0      wealth_tracker_noinv = np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    36         1        181.0    181.0      0.0      returns_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    37         1          1.0      1.0      0.0      price_history, dividend_history = [], []
    38         1        131.0    131.0      0.0      TestThreshold = stdtrit(InvestmentHorizon, 0.95)
    39         1          1.0      1.0      0.0      InvestmentIntensity = 1.0
    40         1          4.0      4.0      0.0      InvestmentSupply = RefInvestmentSupply * POPULATION_SIZE * max(0, ReinvestmentRate - 1)
    41                                           
    42         1       2547.0   2547.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    43         1        188.0    188.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    44         1         15.0     15.0      0.0      bs.UpdatePrevWealth(pop)
    45                                           
    46      1002      26725.0     26.7      0.2      for generation in tqdm(
    47         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    48                                               ):
    49      1000       1906.0      1.9      0.0          InvestmentSupply = InvestmentSupply * (1+INTEREST_RATE)
    50                                           
    51                                                   # Population reset
    52      1000      74211.0     74.2      0.6          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    53                                           
    54                                                   # Hypermutation
    55      2000     174462.0     87.2      1.3          pop, replacements, spoils = ga.hypermutate(
    56      1000       1355.0      1.4      0.0              pop,
    57      1000       1341.0      1.3      0.0              spoils,
    58                                                   )  # Replace insolvent agents
    59                                           
    60                                                   # Strategy evolution
    61      2000     464215.0    232.1      3.5          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    62      1000       1338.0      1.3      0.0              pop,
    63      1000       1303.0      1.3      0.0              space,
    64      1000       1299.0      1.3      0.0              generation,
    65      1000       1320.0      1.3      0.0              wealth_coordinates,
    66      1000       1307.0      1.3      0.0              PROBA_SELECTION,
    67      1000       1297.0      1.3      0.0              MUTATION_RATE,
    68      1000       1335.0      1.3      0.0              InvestmentHorizon
    69                                                   )
    70                                           
    71                                                   # Calculate wealth and previous wealth
    72      1000      14693.0     14.7      0.1          bs.calculate_wealth(pop, CurrentPrice)
    73      1000      11752.0     11.8      0.1          bs.UpdatePrevWealth(pop)
    74                                           
    75                                                   # Market decisions (tsv, proc, edf)
    76      1000     120618.0    120.6      0.9          pop = decision_updates(pop, price_history, dividend_history)
    77                                           
    78                                                   # Market clearing
    79      2000     524803.0    262.4      4.0          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    80      1000       1374.0      1.4      0.0              pop, CurrentPrice, price_history, spoils, solver
    81                                                   )
    82                                           
    83                                                   # Market execution
    84      1000       1448.0      1.4      0.0          (
    85      1000       1309.0      1.3      0.0              pop,
    86      1000       1318.0      1.3      0.0              volume,
    87      1000       1296.0      1.3      0.0              dividend,
    88      1000       1302.0      1.3      0.0              random_dividend,
    89      1000       1286.0      1.3      0.0              dividend_history,
    90      1000       1304.0      1.3      0.0              spoils,
    91      1000       1304.0      1.3      0.0              Liquidations,
    92      2000      95890.0     47.9      0.7          ) = marketActivity(
    93      1000       1319.0      1.3      0.0              pop,
    94      1000       1287.0      1.3      0.0              CurrentPrice,
    95      1000       1290.0      1.3      0.0              asset_supply,
    96      1000       1282.0      1.3      0.0              dividend,
    97      1000       1299.0      1.3      0.0              dividend_history,
    98      1000       1284.0      1.3      0.0              spoils,
    99      1000       1298.0      1.3      0.0              ToLiquidate,
   100                                                   )
   101                                           
   102                                                   # Earnings, compute profits, age
   103      2000      55810.0     27.9      0.4          pop = update_wealth(
   104      1000       1315.0      1.3      0.0              pop,
   105      1000       1303.0      1.3      0.0              CurrentPrice,
   106                                                   )
   107                                           
   108                                                   # Investment
   109      1000       1393.0      1.4      0.0          (
   110      1000       1335.0      1.3      0.0              wealth_tracker, 
   111      1000       1346.0      1.3      0.0              wealth_tracker_noinv,
   112      1000       1354.0      1.4      0.0              returns_tracker
   113      2000      69101.0     34.6      0.5          ) = data.UpdateWealthReturnTracking(
   114      1000       1290.0      1.3      0.0              wealth_tracker, 
   115      1000       1279.0      1.3      0.0              wealth_tracker_noinv,
   116      1000       1290.0      1.3      0.0              returns_tracker, 
   117      1000       1288.0      1.3      0.0              pop, 
   118      1000       1287.0      1.3      0.0              generation
   119                                                   )
   120                                           
   121      1000       1811.0      1.8      0.0          (
   122      1000       1351.0      1.4      0.0              pop, 
   123      1000       1326.0      1.3      0.0              AvgT, 
   124      1000       1333.0      1.3      0.0              PropSignif, 
   125      1000       1326.0      1.3      0.0              HighestT, 
   126      1000       1311.0      1.3      0.0              AvgAbsT 
   127      2000    9189457.0   4594.7     69.4          ) = ProfitDrivenInvestment(
   128      1000       1333.0      1.3      0.0              pop, 
   129      1000       1302.0      1.3      0.0              generation, 
   130      1000       1299.0      1.3      0.0              returns_tracker, 
   131      1000       1334.0      1.3      0.0              InvestmentHorizon, 
   132      1000       1321.0      1.3      0.0              TestThreshold,
   133      1000       1312.0      1.3      0.0              InvestorBehavior,
   134      1000       1303.0      1.3      0.0              ReinvestmentRate
   135                                                   )
   136                                                   #pop = ApplyReinvestment(pop, ReinvestmentRate)
   137                                           
   138                                                   # Record results
   139                                                   # wealth_tracker = iv.WealthTracking(wealth_tracker, pop, generation)
   140      2000    2314400.0   1157.2     17.5          results, wealth_tracker, wealth_tracker_noinv, ReturnsNT, ReturnsVI, ReturnsTF = data.record_results(
   141      1000       1395.0      1.4      0.0              results,
   142      1000       1337.0      1.3      0.0              wealth_tracker,
   143      1000       1325.0      1.3      0.0              wealth_tracker_noinv,
   144      1000       1322.0      1.3      0.0              generation,
   145      1000       1329.0      1.3      0.0              CurrentPrice,
   146      1000       1339.0      1.3      0.0              mismatch,
   147      1000       1375.0      1.4      0.0              dividend,
   148      1000       1340.0      1.3      0.0              random_dividend,
   149      1000       1355.0      1.4      0.0              volume,
   150      1000       1344.0      1.3      0.0              replacements,
   151      1000       1326.0      1.3      0.0              pop,
   152      1000       1311.0      1.3      0.0              spoils,
   153      1000       1308.0      1.3      0.0              Liquidations,
   154      1000       1344.0      1.3      0.0              asset_supply,
   155      1000       1377.0      1.4      0.0              ReturnsNT,
   156      1000       1346.0      1.3      0.0              ReturnsVI,
   157      1000       1337.0      1.3      0.0              ReturnsTF,
   158      1000       1351.0      1.4      0.0              CountSelected,
   159      1000       1365.0      1.4      0.0              CountMutated,
   160      1000       1350.0      1.4      0.0              CountCrossed,
   161      1000       1372.0      1.4      0.0              StratFlow,
   162      1000       1358.0      1.4      0.0              AvgT,
   163      1000       1357.0      1.4      0.0              TestThreshold,
   164      1000       1340.0      1.3      0.0              PropSignif,
   165      1000       1361.0      1.4      0.0              HighestT,
   166      1000       1363.0      1.4      0.0              AvgAbsT 
   167                                                   )
   168                                           
   169         1       1197.0   1197.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   170                                           
   171         1          2.0      2.0      0.0      return df, pop

