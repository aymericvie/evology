         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   91.129184  1.047342e-05  ...    0.999523  110.129999      NaN
1        1.0   92.575245 -3.222493e-06  ...    1.000136  109.771802      NaN
2        2.0   92.864604  1.612119e-06  ...    0.998634  110.690410      NaN
3        3.0   93.035641 -1.255091e-05  ...    0.998192  111.106676      NaN
4        4.0   92.797756 -3.219029e-06  ...    0.997508  110.659891      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  237.172361  7.692724e-07  ...    1.030001  111.353127      NaN
9996  9996.0  255.986717  4.263595e-06  ...    1.028488  110.706378      NaN
9997  9997.0  274.432862  7.003546e-07  ...    1.028291  111.530819      NaN
9998  9998.0  285.338825  1.074746e-06  ...    1.026979  111.958713      NaN
9999  9999.0  318.608163 -2.292916e-06  ...    1.026181  111.674946      NaN

[10000 rows x 79 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 11.004 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               tqdm_display,
    21                                               reset_wealth,
    22                                           ):
    23                                               # Initialisation
    24         1         17.0     17.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    25         1       3169.0   3169.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    26         1          4.0      4.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    27                                           
    28                                               # Population creation
    29         1      46326.0  46326.0      0.4      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    30                                           
    31     10002      73237.0      7.3      0.7      for generation in tqdm(
    32         1          3.0      3.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    33                                               ):
    34     10000      13975.0      1.4      0.1          if CurrentPrice >= 1_000_000:
    35                                                       warnings.warn('Simulation break: price above 1M.')
    36                                                       break
    37                                           
    38                                                   # Population reset
    39     10000      21166.0      2.1      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    40                                           
    41                                                   # Hypermutation
    42                                                   
    43     20000      42646.0      2.1      0.4          pop, replacements, spoils = ga.hypermutate(
    44     10000      13493.0      1.3      0.1              pop, spoils, replace
    45                                                   ) 
    46     10000      13481.0      1.3      0.1          if replacements < 0:
    47                                                       break
    48                                           
    49                                           
    50                                                   # Strategy evolution
    51     10000      49684.0      5.0      0.5          pop = fit.ComputeFitness(pop, 252)
    52     20000     112300.0      5.6      1.0          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    53     10000      13099.0      1.3      0.1              pop,
    54     10000      13008.0      1.3      0.1              space,
    55     10000      12848.0      1.3      0.1              generation,
    56     10000      12864.0      1.3      0.1              wealth_coordinates,
    57     10000      12885.0      1.3      0.1              PROBA_SELECTION,
    58     10000      12903.0      1.3      0.1              MUTATION_RATE,
    59     10000      13140.0      1.3      0.1              252,
    60                                                   )
    61                                           
    62                                                   # Market decisions 
    63     10000      54137.0      5.4      0.5          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    64     10000    1600988.0    160.1     14.5          pop = bsc.NoiseProcess(pop)
    65     10000     192778.0     19.3      1.8          pop = bsc.UpdateFval(pop, dividend)
    66     10000     309341.0     30.9      2.8          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    67     10000     676874.0     67.7      6.2          pop = bsc.DetermineEDF(pop)
    68                                                   
    69                                           
    70                                                   # Market clearing
    71     20000     758493.0     37.9      6.9          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72     10000      13580.0      1.4      0.1              pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   )
    74                                           
    75     10000    1804149.0    180.4     16.4          pop = bsc.CalculateEDV(pop, CurrentPrice)
    76                                           
    77                                                   # Market activity
    78     10000      14198.0      1.4      0.1          (
    79     10000      13497.0      1.3      0.1              pop,
    80     10000      13196.0      1.3      0.1              volume,
    81     10000      13147.0      1.3      0.1              dividend,
    82     10000      13082.0      1.3      0.1              random_dividend,
    83     10000      13190.0      1.3      0.1              dividend_history,
    84     10000      13052.0      1.3      0.1              spoils,
    85     10000      13034.0      1.3      0.1              Liquidations,
    86     20000     632966.0     31.6      5.8          ) = mk.MarketActivity(
    87     10000      13181.0      1.3      0.1              pop,
    88     10000      13065.0      1.3      0.1              CurrentPrice,
    89     10000      12903.0      1.3      0.1              asset_supply,
    90     10000      12877.0      1.3      0.1              dividend,
    91     10000      12906.0      1.3      0.1              dividend_history,
    92     10000      12931.0      1.3      0.1              spoils,
    93     10000      12874.0      1.3      0.1              ToLiquidate,
    94     10000      13552.0      1.4      0.1              random_dividend_history
    95                                                   )
    96     10000      60882.0      6.1      0.6          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    97     10000      16615.0      1.7      0.2          pop = bsc.UpdateQuarterlyWealth(pop, generation)
    98     10000     408854.0     40.9      3.7          pop = bsc.UpdateWealthSeries(pop)
    99                                           
   100                                                   # Investment
   101                                                   ''' former investment process
   102                                                   (pop, AvgT, PropSignif, HighestT, AvgAbsT) = iv.Profit_Investment(
   103                                                   pop, ReinvestmentRate, InvestmentHorizon, generation
   104                                                   )
   105                                                   '''
   106                                           
   107     10000    3097309.0    309.7     28.1          pop = iv.Emp_Investment(pop)
   108     10000      14890.0      1.5      0.1          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   109                                           
   110                                                   # Record results 
   111     20000     387526.0     19.4      3.5          results, sim_break = data.record_results(
   112     10000      13521.0      1.4      0.1              results,
   113     10000      13444.0      1.3      0.1              generation,
   114     10000      13292.0      1.3      0.1              CurrentPrice,
   115     10000      13189.0      1.3      0.1              mismatch,
   116     10000      13207.0      1.3      0.1              dividend,
   117     10000      13193.0      1.3      0.1              random_dividend,
   118     10000      13260.0      1.3      0.1              volume,
   119     10000      13177.0      1.3      0.1              replacements,
   120     10000      13272.0      1.3      0.1              pop,
   121     10000      13209.0      1.3      0.1              spoils,
   122     10000      13218.0      1.3      0.1              Liquidations,
   123     10000      13136.0      1.3      0.1              asset_supply,
   124     10000      13207.0      1.3      0.1              CountSelected,
   125     10000      13261.0      1.3      0.1              CountMutated,
   126     10000      13263.0      1.3      0.1              CountCrossed,
   127     10000      13243.0      1.3      0.1              StratFlow,
   128     10000      13313.0      1.3      0.1              AvgT,
   129     10000      13314.0      1.3      0.1              PropSignif,
   130     10000      13303.0      1.3      0.1              HighestT,
   131     10000      13283.0      1.3      0.1              AvgAbsT,
   132                                                   )
   133                                           
   134     10000      14545.0      1.5      0.1          if sim_break == True:
   135                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   136                                                       break
   137                                           
   138         1          2.0      2.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   139         1          6.0      6.0      0.0          results = results[0:generation+1]
   140                                           
   141         1       3812.0   3812.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   142                                           
   143         1          2.0      2.0      0.0      return df, pop

