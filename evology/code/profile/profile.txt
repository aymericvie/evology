         Gen   Price      Mismatch  ...   AvgAge   DiffReturns  NT_process
0        0.0   93.11  21641.413650  ...      1.0  1.972690e-15    1.000700
1        1.0   95.08  42408.860736  ...      2.0  8.819129e-08    1.000697
2        2.0   96.32  31038.074046  ...      3.0  2.694720e-06    1.000106
3        3.0   95.49  53549.670056  ...      4.0  5.748138e-07    0.998883
4        4.0   94.24 -67389.012617  ...      5.0  1.027156e-06    0.997227
...      ...     ...           ...  ...      ...           ...         ...
9995  9995.0  121.70   -965.730350  ...   9996.0  3.271457e-06    0.993107
9996  9996.0  121.28 -59515.163271  ...   9997.0  6.367287e-07    0.993218
9997  9997.0  122.86  22214.801506  ...   9998.0  5.891535e-06    0.994333
9998  9998.0  121.29 -26687.544845  ...   9999.0  5.646253e-06    0.994334
9999  9999.0  120.23 -49070.153975  ...  10000.0  4.295173e-06    0.994540

[10000 rows x 77 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 9.41899 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def main(
    12                                               space,
    13                                               solver,
    14                                               wealth_coordinates,
    15                                               POPULATION_SIZE,
    16                                               MAX_GENERATIONS,
    17                                               PROBA_SELECTION,
    18                                               MUTATION_RATE,
    19                                               ReinvestmentRate,
    20                                               InvestmentHorizon,
    21                                               tqdm_display,
    22                                               reset_wealth,
    23                                           ):
    24                                               # Initialisation
    25         1          7.0      7.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    26         1       1429.0   1429.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    27         1          1.0      1.0      0.0      price_history, dividend_history, replace = [], [], 0
    28                                           
    29                                               # Population creation
    30         1      23780.0  23780.0      0.3      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    31                                           
    32     10002      67160.0      6.7      0.7      for generation in tqdm(
    33         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    34                                               ):
    35     10000      13655.0      1.4      0.1          if CurrentPrice >= 1_000_000:
    36                                                       break
    37                                           
    38                                                   # Population reset
    39     10000      20874.0      2.1      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    40                                           
    41                                                   # Hypermutation
    42     20000      42105.0      2.1      0.4          pop, replacements, spoils = ga.hypermutate(
    43     10000      12775.0      1.3      0.1              pop, spoils, replace
    44                                                   ) 
    45     10000      13170.0      1.3      0.1          if replacements < 0:
    46                                                       break
    47                                           
    48                                                   # Strategy evolution
    49     10000      50553.0      5.1      0.5          pop = fit.ComputeFitness(pop, InvestmentHorizon)
    50     20000     115601.0      5.8      1.2          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    51     10000      12612.0      1.3      0.1              pop,
    52     10000      12431.0      1.2      0.1              space,
    53     10000      12305.0      1.2      0.1              generation,
    54     10000      12351.0      1.2      0.1              wealth_coordinates,
    55     10000      12352.0      1.2      0.1              PROBA_SELECTION,
    56     10000      12374.0      1.2      0.1              MUTATION_RATE,
    57     10000      12336.0      1.2      0.1              InvestmentHorizon,
    58                                                   )
    59                                           
    60                                                   # Market decisions 
    61     10000      54077.0      5.4      0.6          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    62     10000    1476690.0    147.7     15.7          pop = bsc.NoiseProcess(pop)
    63     10000     701172.0     70.1      7.4          pop = bsc.UpdateFval(pop, dividend)
    64     10000     555303.0     55.5      5.9          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    65     10000     690003.0     69.0      7.3          pop = bsc.DetermineEDF(pop)
    66                                           
    67                                                   # Market clearing
    68     20000    2325499.0    116.3     24.7          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    69     10000      12869.0      1.3      0.1              pop, CurrentPrice, price_history, spoils, solver
    70                                                   )
    71                                           
    72                                                   # Market activity
    73     10000      13188.0      1.3      0.1          (
    74     10000      12735.0      1.3      0.1              pop,
    75     10000      12438.0      1.2      0.1              volume,
    76     10000      12375.0      1.2      0.1              dividend,
    77     10000      12441.0      1.2      0.1              random_dividend,
    78     10000      12517.0      1.3      0.1              dividend_history,
    79     10000      12448.0      1.2      0.1              spoils,
    80     10000      12354.0      1.2      0.1              Liquidations,
    81     20000     610014.0     30.5      6.5          ) = mk.MarketActivity(
    82     10000      12567.0      1.3      0.1              pop,
    83     10000      12337.0      1.2      0.1              CurrentPrice,
    84     10000      12213.0      1.2      0.1              asset_supply,
    85     10000      12161.0      1.2      0.1              dividend,
    86     10000      12253.0      1.2      0.1              dividend_history,
    87     10000      12249.0      1.2      0.1              spoils,
    88     10000      12266.0      1.2      0.1              ToLiquidate,
    89     10000      49059.0      4.9      0.5              np.random.normal(0.0, 1.0)
    90                                                   )
    91     10000      63957.0      6.4      0.7          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    92                                           
    93                                                   # Investment
    94     20000    1442889.0     72.1     15.3          (pop, AvgT, PropSignif, HighestT, AvgAbsT) = iv.Profit_Investment(
    95     10000      12969.0      1.3      0.1          pop, ReinvestmentRate, InvestmentHorizon, generation
    96                                                   )
    97                                           
    98                                                   # Record results 
    99     20000     536926.0     26.8      5.7          results = data.record_results(
   100     10000      12693.0      1.3      0.1              results,
   101     10000      12425.0      1.2      0.1              generation,
   102     10000      12450.0      1.2      0.1              CurrentPrice,
   103     10000      12457.0      1.2      0.1              mismatch,
   104     10000      12444.0      1.2      0.1              dividend,
   105     10000      12391.0      1.2      0.1              random_dividend,
   106     10000      12427.0      1.2      0.1              volume,
   107     10000      12434.0      1.2      0.1              replacements,
   108     10000      12416.0      1.2      0.1              pop,
   109     10000      12416.0      1.2      0.1              spoils,
   110     10000      12450.0      1.2      0.1              Liquidations,
   111     10000      12375.0      1.2      0.1              asset_supply,
   112     10000      12405.0      1.2      0.1              CountSelected,
   113     10000      12474.0      1.2      0.1              CountMutated,
   114     10000      12577.0      1.3      0.1              CountCrossed,
   115     10000      12540.0      1.3      0.1              StratFlow,
   116     10000      12510.0      1.3      0.1              AvgT,
   117     10000      12543.0      1.3      0.1              PropSignif,
   118     10000      12494.0      1.2      0.1              HighestT,
   119     10000      12388.0      1.2      0.1              AvgAbsT,
   120                                                   )
   121                                           
   122         1          2.0      2.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   123                                                   # It means the simulation has breaked.
   124         1          7.0      7.0      0.0          results[generation + 1 : MAX_GENERATIONS - data.Barr, :] = (
   125         2         19.0      9.5      0.0              np.empty((MAX_GENERATIONS - data.Barr - generation - 1, data.variables))
   126         1          2.0      2.0      0.0              * np.nan
   127                                                   )
   128                                           
   129         1       3804.0   3804.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   130                                           
   131         1          2.0      2.0      0.0      return df, pop

