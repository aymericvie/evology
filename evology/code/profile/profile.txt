         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   91.129184  1.047342e-05  ...    0.999523  110.129999      NaN
1        1.0   92.575245 -3.222493e-06  ...    1.000136  109.771802      NaN
2        2.0   92.864604  1.612119e-06  ...    0.998634  110.690410      NaN
3        3.0   93.035641 -1.255091e-05  ...    0.998192  111.106676      NaN
4        4.0   92.797756 -3.219029e-06  ...    0.997508  110.659891      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  237.172361  7.692724e-07  ...    1.030001  111.353127      NaN
9996  9996.0  255.986717  4.263595e-06  ...    1.028488  110.706378      NaN
9997  9997.0  274.432862  7.003546e-07  ...    1.028291  111.530819      NaN
9998  9998.0  285.338825  1.074746e-06  ...    1.026979  111.958713      NaN
9999  9999.0  318.608163 -2.292916e-06  ...    1.026181  111.674946      NaN

[10000 rows x 79 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 9.09363 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               tqdm_display,
    21                                               reset_wealth,
    22                                           ):
    23                                               # Initialisation
    24         1         20.0     20.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    25         1       3395.0   3395.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    26         1          4.0      4.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    27                                           
    28                                               # Population creation
    29         1      46696.0  46696.0      0.5      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    30                                           
    31     10002      62585.0      6.3      0.7      for generation in tqdm(
    32         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    33                                               ):
    34     10000      13815.0      1.4      0.2          if CurrentPrice >= 1_000_000:
    35                                                       warnings.warn('Simulation break: price above 1M.')
    36                                                       break
    37                                           
    38                                                   # Population reset
    39     10000      21022.0      2.1      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    40                                           
    41                                                   # Hypermutation
    42                                                   
    43     20000      42255.0      2.1      0.5          pop, replacements, spoils = ga.hypermutate(
    44     10000      13281.0      1.3      0.1              pop, spoils, replace
    45                                                   ) 
    46     10000      13423.0      1.3      0.1          if replacements < 0:
    47                                                       break
    48                                           
    49                                           
    50                                                   # Strategy evolution
    51     10000      48493.0      4.8      0.5          pop = fit.ComputeFitness(pop, 252)
    52     20000     115996.0      5.8      1.3          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    53     10000      13083.0      1.3      0.1              pop,
    54     10000      12960.0      1.3      0.1              space,
    55     10000      12722.0      1.3      0.1              generation,
    56     10000      12814.0      1.3      0.1              wealth_coordinates,
    57     10000      12820.0      1.3      0.1              PROBA_SELECTION,
    58     10000      12741.0      1.3      0.1              MUTATION_RATE,
    59     10000      13105.0      1.3      0.1              252,
    60                                                   )
    61                                           
    62                                                   # Market decisions 
    63     10000      53704.0      5.4      0.6          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    64     10000    1606377.0    160.6     17.7          pop = bsc.NoiseProcess(pop)
    65     10000     191891.0     19.2      2.1          pop = bsc.UpdateFval(pop, dividend)
    66     10000     303000.0     30.3      3.3          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    67     10000     667729.0     66.8      7.3          pop = bsc.DetermineEDF(pop)
    68                                                   
    69                                           
    70                                                   # Market clearing
    71     20000     757040.0     37.9      8.3          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72     10000      13791.0      1.4      0.2              pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   )
    74                                           
    75     10000    1817402.0    181.7     20.0          pop = bsc.CalculateEDV(pop, CurrentPrice)
    76                                           
    77                                                   # Market activity
    78     10000      14076.0      1.4      0.2          (
    79     10000      13464.0      1.3      0.1              pop,
    80     10000      13037.0      1.3      0.1              volume,
    81     10000      13058.0      1.3      0.1              dividend,
    82     10000      13069.0      1.3      0.1              random_dividend,
    83     10000      13145.0      1.3      0.1              dividend_history,
    84     10000      13088.0      1.3      0.1              spoils,
    85     10000      13078.0      1.3      0.1              Liquidations,
    86     20000     633744.0     31.7      7.0          ) = mk.MarketActivity(
    87     10000      13266.0      1.3      0.1              pop,
    88     10000      13202.0      1.3      0.1              CurrentPrice,
    89     10000      13001.0      1.3      0.1              asset_supply,
    90     10000      12935.0      1.3      0.1              dividend,
    91     10000      12982.0      1.3      0.1              dividend_history,
    92     10000      12953.0      1.3      0.1              spoils,
    93     10000      12896.0      1.3      0.1              ToLiquidate,
    94     10000      13220.0      1.3      0.1              random_dividend_history
    95                                                   )
    96     10000      60123.0      6.0      0.7          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    97     10000      16074.0      1.6      0.2          pop = bsc.UpdateQuarterlyWealth(pop, generation)
    98     10000     410333.0     41.0      4.5          pop = bsc.UpdateWealthSeries(pop)
    99                                           
   100                                                   # Investment
   101                                                   ''' former investment process
   102                                                   (pop, AvgT, PropSignif, HighestT, AvgAbsT) = iv.Profit_Investment(
   103                                                   pop, ReinvestmentRate, InvestmentHorizon, generation
   104                                                   )
   105                                                   '''
   106                                           
   107     10000    1198981.0    119.9     13.2          pop = iv.Emp_Investment(pop)
   108     10000      14779.0      1.5      0.2          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   109                                           
   110                                                   # Record results 
   111     20000     386315.0     19.3      4.2          results, sim_break = data.record_results(
   112     10000      13444.0      1.3      0.1              results,
   113     10000      13359.0      1.3      0.1              generation,
   114     10000      13227.0      1.3      0.1              CurrentPrice,
   115     10000      13260.0      1.3      0.1              mismatch,
   116     10000      13155.0      1.3      0.1              dividend,
   117     10000      13182.0      1.3      0.1              random_dividend,
   118     10000      13124.0      1.3      0.1              volume,
   119     10000      13138.0      1.3      0.1              replacements,
   120     10000      13183.0      1.3      0.1              pop,
   121     10000      13217.0      1.3      0.1              spoils,
   122     10000      13163.0      1.3      0.1              Liquidations,
   123     10000      13270.0      1.3      0.1              asset_supply,
   124     10000      13267.0      1.3      0.1              CountSelected,
   125     10000      13268.0      1.3      0.1              CountMutated,
   126     10000      13213.0      1.3      0.1              CountCrossed,
   127     10000      13259.0      1.3      0.1              StratFlow,
   128     10000      13224.0      1.3      0.1              AvgT,
   129     10000      13319.0      1.3      0.1              PropSignif,
   130     10000      13278.0      1.3      0.1              HighestT,
   131     10000      13172.0      1.3      0.1              AvgAbsT,
   132                                                   )
   133                                           
   134     10000      14634.0      1.5      0.2          if sim_break == True:
   135                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   136                                                       break
   137                                           
   138         1          2.0      2.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   139         1          7.0      7.0      0.0          results = results[0:generation+1]
   140                                           
   141         1       1279.0   1279.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   142                                           
   143         1          2.0      2.0      0.0      return df, pop

