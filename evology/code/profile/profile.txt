         Gen   Price      Mismatch  ...   AvgAge   DiffReturns  NT_process
0        0.0   93.11  21641.413650  ...      1.0  1.972690e-15    1.000700
1        1.0   95.08  42408.860736  ...      2.0  8.819129e-08    1.000697
2        2.0   96.32  31038.074046  ...      3.0  2.694720e-06    1.000106
3        3.0   95.49  53549.670056  ...      4.0  5.748138e-07    0.998883
4        4.0   94.24 -67389.012617  ...      5.0  1.027156e-06    0.997227
...      ...     ...           ...  ...      ...           ...         ...
9995  9995.0  121.70   -965.730350  ...   9996.0  3.271457e-06    0.993107
9996  9996.0  121.28 -59515.163271  ...   9997.0  6.367287e-07    0.993218
9997  9997.0  122.86  22214.801506  ...   9998.0  5.891535e-06    0.994333
9998  9998.0  121.29 -26687.544845  ...   9999.0  5.646253e-06    0.994334
9999  9999.0  120.23 -49070.153975  ...  10000.0  4.295173e-06    0.994540

[10000 rows x 77 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 18.2071 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           
    13                                           def main(
    14                                               space,
    15                                               solver,
    16                                               wealth_coordinates,
    17                                               POPULATION_SIZE,
    18                                               MAX_GENERATIONS,
    19                                               PROBA_SELECTION,
    20                                               MUTATION_RATE,
    21                                               ReinvestmentRate,
    22                                               InvestmentHorizon,
    23                                               tqdm_display,
    24                                               reset_wealth,
    25                                           ):
    26                                               # Initialisation
    27         1          8.0      8.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    28         1       1404.0   1404.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    29         1          4.0      4.0      0.0      price_history, dividend_history, replace = [], [], 0
    30                                           
    31                                               # Population creation
    32         1      33607.0  33607.0      0.2      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    33                                           
    34     10002      72304.0      7.2      0.4      for generation in tqdm(
    35         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    36                                               ):
    37     10000      12832.0      1.3      0.1          if CurrentPrice >= 1_000_000:
    38                                                       break
    39                                           
    40                                                   # Population reset
    41     10000      20340.0      2.0      0.1          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    42                                           
    43                                                   # Hypermutation
    44     20000      40049.0      2.0      0.2          pop, replacements, spoils = ga.hypermutate(
    45     10000      12003.0      1.2      0.1              pop, spoils, replace
    46                                                   ) 
    47     10000      12277.0      1.2      0.1          if replacements < 0:
    48                                                       break
    49                                           
    50                                                   # Strategy evolution
    51     10000      50318.0      5.0      0.3          pop = fit.ComputeFitness(pop, InvestmentHorizon)
    52     20000     114364.0      5.7      0.6          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    53     10000      11825.0      1.2      0.1              pop,
    54     10000      11726.0      1.2      0.1              space,
    55     10000      11604.0      1.2      0.1              generation,
    56     10000      11526.0      1.2      0.1              wealth_coordinates,
    57     10000      11594.0      1.2      0.1              PROBA_SELECTION,
    58     10000      11584.0      1.2      0.1              MUTATION_RATE,
    59     10000      11552.0      1.2      0.1              InvestmentHorizon,
    60                                                   )
    61                                           
    62                                                   # Market decisions 
    63     10000    1450034.0    145.0      8.0          bs.calculate_wealth(pop, CurrentPrice)
    64     10000     921685.0     92.2      5.1          bs.UpdatePrevWealth(pop)
    65     10000    1498742.0    149.9      8.2          pop = bsc.NoiseProcess(pop)
    66     10000     704792.0     70.5      3.9          pop = bsc.UpdateFval(pop, dividend)
    67     10000     553263.0     55.3      3.0          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    68     10000     718188.0     71.8      3.9          pop = bsc.DetermineEDF(pop)
    69                                           
    70                                                   # Market clearing
    71     20000    2378660.0    118.9     13.1          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72     10000      12351.0      1.2      0.1              pop, CurrentPrice, price_history, spoils, solver
    73                                                   )
    74                                           
    75                                                   # Market execution
    76     10000      13366.0      1.3      0.1          (
    77     10000      12162.0      1.2      0.1              pop,
    78     10000      11905.0      1.2      0.1              volume,
    79     10000      11935.0      1.2      0.1              dividend,
    80     10000      11827.0      1.2      0.1              random_dividend,
    81     10000      11948.0      1.2      0.1              dividend_history,
    82     10000      11829.0      1.2      0.1              spoils,
    83     10000      11762.0      1.2      0.1              Liquidations,
    84     20000    6863315.0    343.2     37.7          ) = marketActivity(
    85     10000      11968.0      1.2      0.1              pop,
    86     10000      11711.0      1.2      0.1              CurrentPrice,
    87     10000      11608.0      1.2      0.1              asset_supply,
    88     10000      11611.0      1.2      0.1              dividend,
    89     10000      11748.0      1.2      0.1              dividend_history,
    90     10000      11594.0      1.2      0.1              spoils,
    91     10000      11621.0      1.2      0.1              ToLiquidate,
    92                                                   )
    93                                           
    94                                                   # Earnings, compute profits, age
    95     20000      82523.0      4.1      0.5          pop, replace = update_wealth(
    96     10000      11901.0      1.2      0.1              pop,
    97     10000      11858.0      1.2      0.1              CurrentPrice,
    98                                                   )
    99                                           
   100                                                   # (
   101                                                   #     wealth_tracker,
   102                                                   #     wealth_tracker_noinv,
   103                                                   #     returns_tracker
   104                                                   # ) = data.UpdateWealthReturnTracking(
   105                                                   #     wealth_tracker,
   106                                                   #     wealth_tracker_noinv,
   107                                                   #     returns_tracker,
   108                                                   #     pop,
   109                                                   #     generation
   110                                                   # )
   111                                           
   112     20000    1528214.0     76.4      8.4          (pop, AvgT, PropSignif, HighestT, AvgAbsT) = ProfitDrivenInvestment(
   113     10000      11963.0      1.2      0.1              pop,
   114     10000      11870.0      1.2      0.1              generation,
   115                                                       # returns_tracker,
   116     10000      11826.0      1.2      0.1              InvestmentHorizon,
   117     10000      11830.0      1.2      0.1              ReinvestmentRate,
   118                                                   )
   119                                           
   120     20000     552238.0     27.6      3.0          results = data.record_results(
   121     10000      12105.0      1.2      0.1              results,
   122     10000      11895.0      1.2      0.1              generation,
   123     10000      11817.0      1.2      0.1              CurrentPrice,
   124     10000      11858.0      1.2      0.1              mismatch,
   125     10000      11814.0      1.2      0.1              dividend,
   126     10000      11810.0      1.2      0.1              random_dividend,
   127     10000      11829.0      1.2      0.1              volume,
   128     10000      11849.0      1.2      0.1              replacements,
   129     10000      11853.0      1.2      0.1              pop,
   130     10000      11861.0      1.2      0.1              spoils,
   131     10000      11857.0      1.2      0.1              Liquidations,
   132     10000      11901.0      1.2      0.1              asset_supply,
   133     10000      11864.0      1.2      0.1              CountSelected,
   134     10000      11855.0      1.2      0.1              CountMutated,
   135     10000      11910.0      1.2      0.1              CountCrossed,
   136     10000      11996.0      1.2      0.1              StratFlow,
   137     10000      11910.0      1.2      0.1              AvgT,
   138     10000      12008.0      1.2      0.1              PropSignif,
   139     10000      11834.0      1.2      0.1              HighestT,
   140     10000      11892.0      1.2      0.1              AvgAbsT,
   141                                                   )
   142                                           
   143         1          2.0      2.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   144                                                   # It means the simulation has breaked.
   145         1         14.0     14.0      0.0          results[generation + 1 : MAX_GENERATIONS - data.Barr, :] = (
   146         2         39.0     19.5      0.0              np.empty((MAX_GENERATIONS - data.Barr - generation - 1, data.variables))
   147         1          2.0      2.0      0.0              * np.nan
   148                                                   )
   149                                           
   150         1       4556.0   4556.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   151                                           
   152         1          2.0      2.0      0.0      return df, pop

