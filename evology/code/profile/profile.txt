         Gen      Price      Mismatch  ...  VIflows  TFflows   AvgAge
0        0.0      87.06 -3.493684e+04  ...      0.0      0.0      1.0
1        1.0      85.33  2.528594e+04  ...      0.0      0.0     23.0
2        2.0      84.82  1.858586e+04  ...      0.0      0.0     24.0
3        3.0      85.64  2.158000e+02  ...      0.0      0.0     25.0
4        4.0      87.40  6.907246e+03  ...      0.0      0.0     26.0
...      ...        ...           ...  ...      ...      ...      ...
9974  9974.0  450171.26 -1.260841e+12  ...      0.0      0.0   9996.0
9975  9975.0  450171.26 -1.261873e+12  ...      0.0      0.0   9997.0
9976  9976.0  450171.26 -1.245476e+12  ...      0.0      0.0   9998.0
9977  9977.0  450171.26 -1.246495e+12  ...      0.0      0.0   9999.0
9978  9978.0  450171.26 -1.247515e+12  ...      0.0      0.0  10000.0

[9979 rows x 83 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 171.724 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               ReinvestmentRate,
    21                                               InvestmentHorizon,
    22                                               InvestorBehavior,
    23                                               tqdm_display,
    24                                               reset_wealth
    25                                           ):
    26                                               # Initialise important variables and dataframe to store results
    27         1          5.0      5.0      0.0      ReturnsNT, ReturnsVI, ReturnsTF = (
    28         1       1767.0   1767.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29         1       2049.0   2049.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30         1       2490.0   2490.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    31                                               )
    32         1          3.0      3.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    33         1       1674.0   1674.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    34         1       2945.0   2945.0      0.0      wealth_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    35         1       1975.0   1975.0      0.0      wealth_tracker_noinv = np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    36         1       1825.0   1825.0      0.0      returns_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    37         1          3.0      3.0      0.0      price_history, dividend_history = [], []
    38         1        128.0    128.0      0.0      TestThreshold = stdtrit(InvestmentHorizon, 0.95)
    39         1          2.0      2.0      0.0      InvestmentIntensity = 1.0
    40         1         10.0     10.0      0.0      InvestmentSupply = RefInvestmentSupply * POPULATION_SIZE * max(0, ReinvestmentRate - 1)
    41                                           
    42         1       3414.0   3414.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    43         1        162.0    162.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    44         1         18.0     18.0      0.0      bs.UpdatePrevWealth(pop)
    45                                           
    46     10002     121670.0     12.2      0.1      for generation in tqdm(
    47         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    48                                               ):
    49     10000      22443.0      2.2      0.0          InvestmentSupply = InvestmentSupply * (1+INTEREST_RATE)
    50                                           
    51                                                   # Population reset
    52     10000     393353.0     39.3      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    53                                           
    54                                                   # Hypermutation
    55     20000    1652973.0     82.6      1.0          pop, replacements, spoils = ga.hypermutate(
    56     10000      14129.0      1.4      0.0              pop,
    57     10000      13681.0      1.4      0.0              spoils,
    58                                                   )  # Replace insolvent agents
    59                                           
    60                                                   # Strategy evolution
    61     20000    4866844.0    243.3      2.8          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    62     10000      13800.0      1.4      0.0              pop,
    63     10000      13757.0      1.4      0.0              space,
    64     10000      13642.0      1.4      0.0              generation,
    65     10000      13547.0      1.4      0.0              wealth_coordinates,
    66     10000      13770.0      1.4      0.0              PROBA_SELECTION,
    67     10000      15006.0      1.5      0.0              MUTATION_RATE,
    68     10000      13738.0      1.4      0.0              InvestmentHorizon
    69                                                   )
    70                                           
    71                                                   # Calculate wealth and previous wealth
    72     10000     159993.0     16.0      0.1          bs.calculate_wealth(pop, CurrentPrice)
    73     10000     128868.0     12.9      0.1          bs.UpdatePrevWealth(pop)
    74                                           
    75                                                   # Market decisions (tsv, proc, edf)
    76     10000    1223963.0    122.4      0.7          pop = decision_updates(pop, price_history, dividend_history)
    77                                           
    78                                                   # Market clearing
    79     20000    8062197.0    403.1      4.7          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    80     10000      14314.0      1.4      0.0              pop, CurrentPrice, price_history, spoils, solver
    81                                                   )
    82                                           
    83                                                   # Market execution
    84     10000      15124.0      1.5      0.0          (
    85     10000      13658.0      1.4      0.0              pop,
    86     10000      13663.0      1.4      0.0              volume,
    87     10000      13422.0      1.3      0.0              dividend,
    88     10000      13724.0      1.4      0.0              random_dividend,
    89     10000      13452.0      1.3      0.0              dividend_history,
    90     10000      13553.0      1.4      0.0              spoils,
    91     10000      13631.0      1.4      0.0              Liquidations,
    92     20000    1051404.0     52.6      0.6          ) = marketActivity(
    93     10000      13571.0      1.4      0.0              pop,
    94     10000      13304.0      1.3      0.0              CurrentPrice,
    95     10000      13249.0      1.3      0.0              asset_supply,
    96     10000      13245.0      1.3      0.0              dividend,
    97     10000      13204.0      1.3      0.0              dividend_history,
    98     10000      13169.0      1.3      0.0              spoils,
    99     10000      13229.0      1.3      0.0              ToLiquidate,
   100                                                   )
   101                                           
   102                                                   # Earnings, compute profits, age
   103     20000     581906.0     29.1      0.3          pop = update_wealth(
   104     10000      13379.0      1.3      0.0              pop,
   105     10000      13426.0      1.3      0.0              CurrentPrice,
   106                                                   )
   107                                           
   108                                                   # Investment
   109     10000      14525.0      1.5      0.0          (
   110     10000      14429.0      1.4      0.0              wealth_tracker, 
   111     10000      13492.0      1.3      0.0              wealth_tracker_noinv,
   112     10000      13472.0      1.3      0.0              returns_tracker
   113     20000     742689.0     37.1      0.4          ) = data.UpdateWealthReturnTracking(
   114     10000      14051.0      1.4      0.0              wealth_tracker, 
   115     10000      13486.0      1.3      0.0              wealth_tracker_noinv,
   116     10000      13489.0      1.3      0.0              returns_tracker, 
   117     10000      13601.0      1.4      0.0              pop, 
   118     10000      13391.0      1.3      0.0              generation
   119                                                   )
   120                                           
   121     10000      24598.0      2.5      0.0          (
   122     10000      14372.0      1.4      0.0              pop, 
   123     10000      13953.0      1.4      0.0              AvgT, 
   124     10000      13769.0      1.4      0.0              PropSignif, 
   125     10000      13779.0      1.4      0.0              HighestT, 
   126     10000      13699.0      1.4      0.0              AvgAbsT 
   127     20000  120326941.0   6016.3     70.1          ) = ApplyInvestment(
   128     10000      13851.0      1.4      0.0              pop, 
   129     10000      13405.0      1.3      0.0              generation, 
   130     10000      13455.0      1.3      0.0              returns_tracker, 
   131     10000      14775.0      1.5      0.0              InvestmentHorizon, 
   132     10000      13465.0      1.3      0.0              InvestmentSupply, 
   133     10000      13563.0      1.4      0.0              TestThreshold,
   134     10000      13488.0      1.3      0.0              InvestmentIntensity,
   135     10000      13534.0      1.4      0.0              InvestorBehavior,
   136     10000      13417.0      1.3      0.0              ReinvestmentRate
   137                                                   )
   138                                                   #pop = ApplyReinvestment(pop, ReinvestmentRate)
   139                                           
   140                                                   # Record results
   141                                                   # wealth_tracker = iv.WealthTracking(wealth_tracker, pop, generation)
   142     20000   31289740.0   1564.5     18.2          results, wealth_tracker, wealth_tracker_noinv, ReturnsNT, ReturnsVI, ReturnsTF = data.record_results(
   143     10000      14177.0      1.4      0.0              results,
   144     10000      13699.0      1.4      0.0              wealth_tracker,
   145     10000      13609.0      1.4      0.0              wealth_tracker_noinv,
   146     10000      13541.0      1.4      0.0              generation,
   147     10000      13805.0      1.4      0.0              CurrentPrice,
   148     10000      13682.0      1.4      0.0              mismatch,
   149     10000      14076.0      1.4      0.0              dividend,
   150     10000      13522.0      1.4      0.0              random_dividend,
   151     10000      13504.0      1.4      0.0              volume,
   152     10000      13476.0      1.3      0.0              replacements,
   153     10000      13575.0      1.4      0.0              pop,
   154     10000      13621.0      1.4      0.0              spoils,
   155     10000      13626.0      1.4      0.0              Liquidations,
   156     10000      14018.0      1.4      0.0              asset_supply,
   157     10000      15199.0      1.5      0.0              ReturnsNT,
   158     10000      13938.0      1.4      0.0              ReturnsVI,
   159     10000      13832.0      1.4      0.0              ReturnsTF,
   160     10000      13685.0      1.4      0.0              CountSelected,
   161     10000      13571.0      1.4      0.0              CountMutated,
   162     10000      13744.0      1.4      0.0              CountCrossed,
   163     10000      14247.0      1.4      0.0              StratFlow,
   164     10000      13591.0      1.4      0.0              AvgT,
   165     10000      13852.0      1.4      0.0              TestThreshold,
   166     10000      13786.0      1.4      0.0              PropSignif,
   167     10000      13754.0      1.4      0.0              HighestT,
   168     10000      13736.0      1.4      0.0              AvgAbsT 
   169                                                   )
   170                                           
   171         1      10860.0  10860.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   172                                           
   173         1          3.0      3.0      0.0      return df, pop

