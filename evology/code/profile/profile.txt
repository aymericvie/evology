         Gen      Price      Mismatch  ...      NT_asset      VI_asset      TF_asset
0        0.0  90.000000 -6.040600e+07  ...  1.766043e+08  2.040513e+08  1.193443e+08
1        1.0  84.455408 -7.315539e-07  ...  1.795389e+08  1.996355e+08  1.208256e+08
2        2.0  82.938770  1.325656e-05  ...  1.715294e+08  2.097150e+08  1.187555e+08
3        3.0  83.328892  4.732283e-08  ...  1.710206e+08  2.119557e+08  1.170237e+08
4        4.0  83.466731  1.305185e-05  ...  1.745672e+08  2.082990e+08  1.171338e+08
...      ...        ...           ...  ...           ...           ...           ...
9994  9994.0  61.009905  8.182542e-08  ...  4.236915e+08  6.420094e+07  1.210758e+07
9995  9995.0  61.103395  5.177739e-05  ...  4.192010e+08  6.902347e+07  1.177550e+07
9996  9996.0  61.049329 -3.463079e-06  ...  4.173644e+08  6.891812e+07  1.371750e+07
9997  9997.0  61.098891  2.198998e-06  ...  4.188084e+08  6.696892e+07  1.422267e+07
9998  9998.0  60.862298  4.065805e-08  ...  4.147606e+08  6.951736e+07  1.572206e+07

[9999 rows x 74 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 6.16654 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def main(
    12                                               strategy,
    13                                               space,
    14                                               wealth_coordinates,
    15                                               POPULATION_SIZE,
    16                                               MAX_GENERATIONS,
    17                                               seed,
    18                                               tqdm_display,
    19                                               reset_wealth,
    20                                           ):
    21                                               # Initialisation
    22         1          8.0      8.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0.0
    23         1       1371.0   1371.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    24         1          1.0      1.0      0.0      replace, volume = 0, 0.0
    25                                           
    26                                               # Random generator
    27         1        142.0    142.0      0.0      rng = np.random.default_rng(seed=seed)
    28         1          5.0      5.0      0.0      np.random.seed(seed)
    29                                           
    30                                               # Population creation
    31         2      52907.0  26453.5      0.9      pop, asset_supply = cr.CreatePop(
    32         1          1.0      1.0      0.0          POPULATION_SIZE, space, wealth_coordinates, CurrentPrice, strategy, rng
    33                                               )
    34                                           
    35                                               # Dividend and NT process generation
    36                                               # price_history = prc.FictiousPriceSeries(rng)
    37         1          4.0      4.0      0.0      price_history = []
    38         1          5.0      5.0      0.0      price_emas = [InitialPrice] * len(tf_daily_ma_horizons)
    39                                           
    40         1      34942.0  34942.0      0.6      dividend_series, rd_dividend_series = div.ExogeneousDividends(MAX_GENERATIONS, rng)
    41         1        163.0    163.0      0.0      rng = np.random.default_rng(seed=seed + 1)
    42         1       9018.0   9018.0      0.1      process_series = prc.ExogeneousProcess(MAX_GENERATIONS, rng)
    43         1         47.0     47.0      0.0      rng = np.random.default_rng(seed=seed)
    44                                           
    45     10002      66288.0      6.6      1.1      for generation in tqdm(
    46         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    47                                               ):
    48                                           
    49                                                   # Population reset
    50     20000      36546.0      1.8      0.6          pop = cr.WealthReset(
    51     10000      13984.0      1.4      0.2              pop,
    52     10000      13656.0      1.4      0.2              POPULATION_SIZE,
    53     10000      13601.0      1.4      0.2              space,
    54     10000      13586.0      1.4      0.2              wealth_coordinates,
    55     10000      13634.0      1.4      0.2              generation,
    56     10000      13708.0      1.4      0.2              reset_wealth,
    57     10000      13811.0      1.4      0.2              CurrentPrice,
    58     10000      13701.0      1.4      0.2              strategy,
    59     10000      13766.0      1.4      0.2              rng,
    60                                                   )
    61                                           
    62                                                   # Hypermutation
    63     10000      31572.0      3.2      0.5          pop, replacements, spoils = ga.hypermutate(pop, spoils, replace)
    64     10000      14535.0      1.5      0.2          if replacements < 0:
    65                                                       break
    66                                           
    67                                                   # Strategy evolution
    68                                                   # pop = fit.ComputeFitness(pop, 252)
    69                                           
    70                                                   # pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    71                                                   #    pop,
    72                                                   #    space,
    73                                                   #    generation,
    74                                                   #    wealth_coordinates,
    75                                                   #    PROBA_SELECTION,
    76                                                   #    MUTATION_RATE,
    77                                                   #    252,
    78                                                   # )
    79                                           
    80                                                   # Market decisions
    81                                           
    82     10000      57606.0      5.8      0.9          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    83     10000      53000.0      5.3      0.9          pop = bsc.UpdateFval(pop, dividend)
    84     10000      28696.0      2.9      0.5          price_emas = bsc.price_emas(CurrentPrice, price_emas)
    85     20000     352778.0     17.6      5.7          pop = bsc.CalculateTSV_staticf(
    86     10000      14070.0      1.4      0.2              pop,
    87     10000      13895.0      1.4      0.2              price_history,
    88     10000      13808.0      1.4      0.2              CurrentPrice,
    89     10000      14698.0      1.5      0.2              process_series[generation],
    90     10000      13946.0      1.4      0.2              rng,
    91     10000      13868.0      1.4      0.2              price_emas,
    92                                                   )
    93     10000      17888.0      1.8      0.3          pop = bsc.CalculateTSV_avf(pop, generation, strategy, price_history, dividend)
    94     10000      15674.0      1.6      0.3          ToLiquidate = bsc.DetermineLiquidation(spoils, volume)
    95                                           
    96                                                   # ''' for VI on contemporaneous price '''
    97                                                   # ed_functions = bsc.agg_ed_esl(pop, ToLiquidate)
    98                                                   # CurrentPrice = mc.esl_solver(ed_functions, CurrentPrice)
    99     10000     547176.0     54.7      8.9          ed_functions = cz.agg_ed(pop, ToLiquidate)
   100     10000    2261567.0    226.2     36.7          NewPrice = mc.scipy_solver(ed_functions, CurrentPrice)
   101     10000     231431.0     23.1      3.8          pop, mismatch = cz.calculate_edv(pop, NewPrice)
   102                                           
   103                                                   # Market activity
   104     10000      14614.0      1.5      0.2          dividend, random_dividend = (
   105     10000      17910.0      1.8      0.3              dividend_series[0, generation],
   106     10000      15537.0      1.6      0.3              rd_dividend_series[0, generation],
   107                                                   )
   108     20000     267943.0     13.4      4.3          pop, volume, spoils, Liquidations = mk.execute_ed(
   109     10000      14467.0      1.4      0.2              pop, NewPrice, asset_supply, spoils, ToLiquidate
   110                                                   )
   111                                           
   112                                                   # if volume != 0:
   113                                                   #     CurrentPrice = NewPrice
   114     10000      15234.0      1.5      0.2          CurrentPrice = NewPrice
   115                                           
   116     10000      36333.0      3.6      0.6          if CurrentPrice >= 1_000_000:
   117                                                       warnings.warn("Simulation break: price above 1M.")
   118                                                       # raise RuntimeError('Price above 1M')
   119                                                       break
   120     10000      17065.0      1.7      0.3          price_history = bsc.UpdatePriceHistory(price_history, CurrentPrice)
   121                                           
   122     10000     267121.0     26.7      4.3          pop = mk.earnings(pop, dividend)
   123     10000      52533.0      5.3      0.9          pop = mk.update_margin(pop, CurrentPrice)
   124     10000      42794.0      4.3      0.7          pop = mk.clear_debt(pop, CurrentPrice)
   125                                           
   126     10000      63241.0      6.3      1.0          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
   127     10000      17523.0      1.8      0.3          pop = bsc.UpdateQuarterlyWealth(pop, generation)
   128     10000     416868.0     41.7      6.8          pop = bsc.UpdateWealthSeries(pop)
   129                                           
   130                                                   """
   131                                                   if generation >= ShieldInvestment:
   132                                                       pop = iv.Emp_Investment(pop, rng)
   133                                                   """
   134                                           
   135                                                   # Record results
   136     20000     684302.0     34.2     11.1          results, sim_break = data.record_results(
   137     10000      14439.0      1.4      0.2              results,
   138     10000      14227.0      1.4      0.2              generation,
   139     10000      14006.0      1.4      0.2              CurrentPrice,
   140     10000      14072.0      1.4      0.2              mismatch,
   141     10000      14042.0      1.4      0.2              dividend,
   142     10000      14089.0      1.4      0.2              random_dividend,
   143     10000      13934.0      1.4      0.2              volume,
   144     10000      13967.0      1.4      0.2              replacements,
   145     10000      14132.0      1.4      0.2              pop,
   146     10000      14073.0      1.4      0.2              spoils,
   147     10000      14009.0      1.4      0.2              Liquidations,
   148     10000      13972.0      1.4      0.2              asset_supply,
   149     10000      14922.0      1.5      0.2              process_series[generation],
   150                                                   )
   151                                           
   152     10000      15791.0      1.6      0.3          if sim_break == 1 and reset_wealth != True:
   153                                                       warnings.warn("Only one base strategy left.")
   154                                                       break
   155                                           
   156         1          3.0      3.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   157         1          3.0      3.0      0.0          results = results[0:generation]
   158                                           
   159         1       2267.0   2267.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   160                                           
   161                                               # av_stats = [df["AV_wealth"].iloc[-1] / df["AV_wealth"].iloc[0] - 1, round(df["AV_return"].mean(),4), round(df["AV_return"].std(),3),
   162                                               # df["AV_wealth"].iloc[0], df["AV_wealth"].iloc[-1]]
   163                                           
   164         1          2.0      2.0      0.0      return df, pop  # , av_stats

