         Gen   Price  ...  PropSignifInvestment  AvgSignificance
0        0.0   87.06  ...              0.000000         0.000000
1        1.0   85.33  ...              0.000000         0.000000
2        2.0   84.82  ...              0.000000         0.000000
3        3.0   86.03  ...              0.000000         0.000000
4        4.0   88.11  ...              0.000000         0.000000
...      ...     ...  ...                   ...              ...
9974  9974.0  105.22  ...             65.707930      -107.425057
9975  9975.0  105.31  ...             65.496711      -107.425057
9976  9976.0  106.01  ...             65.460366      -107.425057
9977  9977.0  107.80  ...             65.554023      -107.425057
9978  9978.0  107.89  ...             71.316405       -72.505101

[9979 rows x 64 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 91.4514 s
File: evology/code/profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               ReinvestmentRate,
    21                                               InvestmentHorizon,
    22                                               tqdm_display,
    23                                               reset_wealth
    24                                           ):
    25                                               # Initialise important variables and dataframe to store results
    26         1          3.0      3.0      0.0      ReturnsNT, ReturnsVI, ReturnsTF = (
    27         1       1936.0   1936.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    28         1       1989.0   1989.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29         1       3974.0   3974.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30                                               )
    31         1          7.0      7.0      0.0      generation, CurrentPrice, dividend, spoils, InvestmentSupply = 0, InitialPrice, INITIAL_DIVIDEND, 0, RefInvestmentSupply * POPULATION_SIZE
    32         1       1305.0   1305.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    33         1       1821.0   1821.0      0.0      wealth_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    34         1       2041.0   2041.0      0.0      returns_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    35         1          5.0      5.0      0.0      price_history, dividend_history = [], []
    36         1        154.0    154.0      0.0      TestThreshold = stdtrit(InvestmentHorizon, 0.95)
    37                                           
    38         1       4010.0   4010.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    39         1        234.0    234.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    40         1          7.0      7.0      0.0      bs.UpdatePrevWealth(pop)
    41                                           
    42     10002     101823.0     10.2      0.1      for generation in tqdm(
    43         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    44                                               ):
    45                                           
    46                                                   # Population reset
    47     10000      74653.0      7.5      0.1          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    48                                           
    49                                                   # Hypermutation
    50     20000    1629679.0     81.5      1.8          pop, replacements, spoils = ga.hypermutate(
    51     10000      12025.0      1.2      0.0              pop,
    52     10000      12008.0      1.2      0.0              spoils,
    53                                                   )  # Replace insolvent agents
    54                                           
    55                                                   # Strategy evolution
    56     20000    4377785.0    218.9      4.8          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    57     10000      12393.0      1.2      0.0              pop,
    58     10000      12220.0      1.2      0.0              space,
    59     10000      12143.0      1.2      0.0              generation,
    60     10000      12149.0      1.2      0.0              wealth_coordinates,
    61     10000      12085.0      1.2      0.0              PROBA_SELECTION,
    62     10000      12138.0      1.2      0.0              MUTATION_RATE,
    63                                                   )
    64                                           
    65                                                   # Calculate wealth and previous wealth
    66     10000     136674.0     13.7      0.1          bs.calculate_wealth(pop, CurrentPrice)
    67     10000      49593.0      5.0      0.1          bs.UpdatePrevWealth(pop)
    68                                           
    69                                                   # Market decisions (tsv, proc, edf)
    70     10000    1143694.0    114.4      1.3          pop = decision_updates(pop, price_history, dividend_history)
    71                                           
    72                                                   # Market clearing
    73     20000    4485865.0    224.3      4.9          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    74     10000      12823.0      1.3      0.0              pop, CurrentPrice, price_history, spoils, solver
    75                                                   )
    76                                           
    77                                                   # Market execution
    78     10000      13753.0      1.4      0.0          (
    79     10000      12289.0      1.2      0.0              pop,
    80     10000      12472.0      1.2      0.0              volume,
    81     10000      12086.0      1.2      0.0              dividend,
    82     10000      12195.0      1.2      0.0              random_dividend,
    83     10000      12069.0      1.2      0.0              dividend_history,
    84     10000      12128.0      1.2      0.0              spoils,
    85     20000     931689.0     46.6      1.0          ) = marketActivity(
    86     10000      12303.0      1.2      0.0              pop,
    87     10000      12004.0      1.2      0.0              CurrentPrice,
    88     10000      11960.0      1.2      0.0              asset_supply,
    89     10000      11880.0      1.2      0.0              dividend,
    90     10000      12546.0      1.3      0.0              dividend_history,
    91     10000      13287.0      1.3      0.0              spoils,
    92     10000      11964.0      1.2      0.0              ToLiquidate,
    93                                                   )
    94                                           
    95                                                   # Earnings, compute profits, age
    96     20000     573918.0     28.7      0.6          pop = update_wealth(
    97     10000      12175.0      1.2      0.0              pop,
    98     10000      12179.0      1.2      0.0              CurrentPrice,
    99     10000      12112.0      1.2      0.0              ReinvestmentRate,
   100                                                   )
   101                                           
   102                                                   # Investment
   103     10000      12995.0      1.3      0.0          (
   104     10000      12304.0      1.2      0.0              wealth_tracker, 
   105     10000      12286.0      1.2      0.0              returns_tracker 
   106     20000     732795.0     36.6      0.8          ) = data.UpdateWealthReturnTracking(
   107     10000      12243.0      1.2      0.0              wealth_tracker, 
   108     10000      12173.0      1.2      0.0              returns_tracker, 
   109     10000      12073.0      1.2      0.0              pop, 
   110     10000      12195.0      1.2      0.0              generation
   111                                                   )
   112                                           
   113     10000      17374.0      1.7      0.0          (
   114     10000      12658.0      1.3      0.0              returns_tracker, 
   115     10000      12246.0      1.2      0.0              pop, 
   116     10000      12715.0      1.3      0.0              propSignif,
   117     10000      12593.0      1.3      0.0              AvgValSignif
   118     20000   69999384.0   3500.0     76.5          ) = ApplyInvestment(
   119     10000      12325.0      1.2      0.0              pop, 
   120     10000      12295.0      1.2      0.0              generation, 
   121     10000      12238.0      1.2      0.0              returns_tracker, 
   122     10000      12240.0      1.2      0.0              InvestmentHorizon, 
   123     10000      12238.0      1.2      0.0              InvestmentSupply, 
   124     10000      12385.0      1.2      0.0              TestThreshold
   125                                                   )
   126                                           
   127                                                   # Record results
   128                                                   # wealth_tracker = iv.WealthTracking(wealth_tracker, pop, generation)
   129     20000    6385661.0    319.3      7.0          results, wealth_tracker, ReturnsNT, ReturnsVI, ReturnsTF = data.record_results(
   130     10000      12400.0      1.2      0.0              results,
   131     10000      12317.0      1.2      0.0              wealth_tracker,
   132     10000      12255.0      1.2      0.0              generation,
   133     10000      12519.0      1.3      0.0              CurrentPrice,
   134     10000      12451.0      1.2      0.0              mismatch,
   135     10000      12310.0      1.2      0.0              dividend,
   136     10000      12312.0      1.2      0.0              random_dividend,
   137     10000      12480.0      1.2      0.0              volume,
   138     10000      12214.0      1.2      0.0              replacements,
   139     10000      12362.0      1.2      0.0              pop,
   140     10000      12535.0      1.3      0.0              spoils,
   141     10000      12404.0      1.2      0.0              asset_supply,
   142     10000      12627.0      1.3      0.0              ReturnsNT,
   143     10000      12490.0      1.2      0.0              ReturnsVI,
   144     10000      14110.0      1.4      0.0              ReturnsTF,
   145     10000      12433.0      1.2      0.0              CountSelected,
   146     10000      12311.0      1.2      0.0              CountMutated,
   147     10000      12433.0      1.2      0.0              CountCrossed,
   148     10000      12528.0      1.3      0.0              StratFlow,
   149     10000      12414.0      1.2      0.0              propSignif,
   150     10000      12510.0      1.3      0.0              AvgValSignif,
   151                                                   )
   152                                           
   153         1       1314.0   1314.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   154                                           
   155         1          1.0      1.0      0.0      return df, pop, ReturnsNT, ReturnsVI, ReturnsTF

