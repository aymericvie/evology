         Gen   Price       Mismatch  ...  TFflows    AvgAge   DiffReturns
0        0.0   83.23  -30806.308039  ...      0.0    22.000  5.764178e-04
1        1.0   83.59 -104988.958359  ...      0.0    23.000  1.570697e-05
2        2.0   83.88   36800.088994  ...      0.0    24.000  8.833666e-06
3        3.0   83.98  111763.089344  ...      0.0    25.000  1.515060e-06
4        4.0   83.56  322824.079814  ...      0.0    26.000  2.288041e-05
...      ...     ...            ...  ...      ...       ...           ...
9974  9974.0  150.54 -240780.608664  ...      0.0  9830.075  5.226520e-06
9975  9975.0  150.81 -312551.097378  ...      0.0  9831.075  3.344183e-06
9976  9976.0  150.79 -387745.722006  ...      0.0  9832.075  2.526187e-08
9977  9977.0  149.41  318178.916714  ...      0.0  9833.075  6.968063e-05
9978  9978.0  149.17  120387.481666  ...      0.0  9834.075  2.830697e-06

[9979 rows x 76 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 81.9738 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               ReinvestmentRate,
    21                                               InvestmentHorizon,
    22                                               InvestorBehavior,
    23                                               tqdm_display,
    24                                               reset_wealth
    25                                           ):
    26                                               # Initialise important variables and dataframe to store results
    27                                               #ReturnsNT, ReturnsVI, ReturnsTF = (
    28                                               #    np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29                                               #    np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30                                               #    np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    31                                               #)
    32         1         10.0     10.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    33         1       2039.0   2039.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    34         1         40.0     40.0      0.0      wealth_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    35         1          8.0      8.0      0.0      wealth_tracker_noinv = np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    36         1          6.0      6.0      0.0      returns_tracker= np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    37         1          3.0      3.0      0.0      price_history, dividend_history = [], []
    38         1        162.0    162.0      0.0      TestThreshold = stdtrit(InvestmentHorizon, 0.95)
    39         1          2.0      2.0      0.0      InvestmentIntensity = 1.0
    40         1         11.0     11.0      0.0      InvestmentSupply = RefInvestmentSupply * POPULATION_SIZE * max(0, ReinvestmentRate - 1)
    41                                           
    42         1      32092.0  32092.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    43         1        246.0    246.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    44         1        160.0    160.0      0.0      bs.UpdatePrevWealth(pop)
    45                                           
    46     10002     110846.0     11.1      0.1      for generation in tqdm(
    47         1          8.0      8.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    48                                               ):
    49     10000      16204.0      1.6      0.0          if CurrentPrice >= 1_000_000:
    50                                                       break
    51                                           
    52     10000      18272.0      1.8      0.0          InvestmentSupply = InvestmentSupply * (1+INTEREST_RATE)
    53                                           
    54                                                   # Population reset
    55     10000      30552.0      3.1      0.0          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    56                                           
    57                                                   # Hypermutation
    58     20000   16933833.0    846.7     20.7          pop, replacements, spoils = ga.hypermutate(
    59     10000      14305.0      1.4      0.0              pop,
    60     10000      14128.0      1.4      0.0              spoils,
    61                                                   )  # Replace insolvent agents
    62     10000      18742.0      1.9      0.0          if replacements < 0:
    63                                                       break
    64                                           
    65                                                   # Strategy evolution
    66     10000      69455.0      6.9      0.1          pop = fit.ComputeFitness(pop, InvestmentHorizon)
    67     20000     147529.0      7.4      0.2          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    68     10000      15160.0      1.5      0.0              pop,
    69     10000      15061.0      1.5      0.0              space,
    70     10000      14945.0      1.5      0.0              generation,
    71     10000      14849.0      1.5      0.0              wealth_coordinates,
    72     10000      14786.0      1.5      0.0              PROBA_SELECTION,
    73     10000      14586.0      1.5      0.0              MUTATION_RATE,
    74     10000      14789.0      1.5      0.0              InvestmentHorizon
    75                                                   )
    76                                           
    77                                                   # Calculate wealth and previous wealth
    78     10000    1240021.0    124.0      1.5          bs.calculate_wealth(pop, CurrentPrice)
    79     10000    1032866.0    103.3      1.3          bs.UpdatePrevWealth(pop)
    80                                           
    81                                                   # Market decisions (tsv, proc, edf)
    82     10000    9692955.0    969.3     11.8          pop = decision_updates(pop, price_history, dividend_history)
    83                                           
    84                                                   # Market clearing
    85     20000   28420878.0   1421.0     34.7          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    86     10000      15367.0      1.5      0.0              pop, CurrentPrice, price_history, spoils, solver
    87                                                   )
    88                                           
    89                                                   # Market execution
    90     10000      17870.0      1.8      0.0          (
    91     10000      14670.0      1.5      0.0              pop,
    92     10000      14745.0      1.5      0.0              volume,
    93     10000      14343.0      1.4      0.0              dividend,
    94     10000      14736.0      1.5      0.0              random_dividend,
    95     10000      14279.0      1.4      0.0              dividend_history,
    96     10000      14544.0      1.5      0.0              spoils,
    97     10000      14753.0      1.5      0.0              Liquidations,
    98     20000    8516947.0    425.8     10.4          ) = marketActivity(
    99     10000      14827.0      1.5      0.0              pop,
   100     10000      14293.0      1.4      0.0              CurrentPrice,
   101     10000      14429.0      1.4      0.0              asset_supply,
   102     10000      14278.0      1.4      0.0              dividend,
   103     10000      14339.0      1.4      0.0              dividend_history,
   104     10000      14310.0      1.4      0.0              spoils,
   105     10000      14436.0      1.4      0.0              ToLiquidate,
   106                                                   )
   107                                           
   108                                                   # Earnings, compute profits, age
   109     20000    4783471.0    239.2      5.8          pop = update_wealth(
   110     10000      14617.0      1.5      0.0              pop,
   111     10000      14571.0      1.5      0.0              CurrentPrice,
   112                                                   )
   113                                           
   114                                                   # Investment
   115     10000      19060.0      1.9      0.0          (
   116     10000      14836.0      1.5      0.0              wealth_tracker, 
   117     10000      14543.0      1.5      0.0              wealth_tracker_noinv,
   118     10000      14755.0      1.5      0.0              returns_tracker
   119     20000    7334180.0    366.7      8.9          ) = data.UpdateWealthReturnTracking(
   120     10000      15068.0      1.5      0.0              wealth_tracker, 
   121     10000      14710.0      1.5      0.0              wealth_tracker_noinv,
   122     10000      14398.0      1.4      0.0              returns_tracker, 
   123     10000      14529.0      1.5      0.0              pop, 
   124     10000      14610.0      1.5      0.0              generation
   125                                                   )
   126                                           
   127     10000      15640.0      1.6      0.0          (
   128     10000      14996.0      1.5      0.0              pop, 
   129     10000      14773.0      1.5      0.0              AvgT, 
   130     10000      14620.0      1.5      0.0              PropSignif, 
   131     10000      14599.0      1.5      0.0              HighestT, 
   132     10000      14610.0      1.5      0.0              AvgAbsT 
   133     20000    1536167.0     76.8      1.9          ) = ProfitDrivenInvestment(
   134     10000      14850.0      1.5      0.0              pop, 
   135     10000      14608.0      1.5      0.0              generation, 
   136     10000      14756.0      1.5      0.0              returns_tracker, 
   137     10000      14780.0      1.5      0.0              InvestmentHorizon, 
   138     10000      14883.0      1.5      0.0              TestThreshold,
   139     10000      15065.0      1.5      0.0              ReinvestmentRate
   140                                                   )
   141                                                   #pop = ApplyReinvestment(pop, ReinvestmentRate)
   142                                           
   143                                                   # Record results
   144                                                   # wealth_tracker = iv.WealthTracking(wealth_tracker, pop, generation)
   145     20000     957302.0     47.9      1.2          results = data.record_results(
   146     10000      15691.0      1.6      0.0              results,
   147     10000      14746.0      1.5      0.0              generation,
   148     10000      14634.0      1.5      0.0              CurrentPrice,
   149     10000      14597.0      1.5      0.0              mismatch,
   150     10000      63435.0      6.3      0.1              dividend,
   151     10000      14665.0      1.5      0.0              random_dividend,
   152     10000      14649.0      1.5      0.0              volume,
   153     10000      14789.0      1.5      0.0              replacements,
   154     10000      14698.0      1.5      0.0              pop,
   155     10000      14638.0      1.5      0.0              spoils,
   156     10000      14817.0      1.5      0.0              Liquidations,
   157     10000      14819.0      1.5      0.0              asset_supply,
   158                                                       #ReturnsNT,
   159                                                       #ReturnsVI,
   160                                                       #ReturnsTF,
   161     10000      14811.0      1.5      0.0              CountSelected,
   162     10000      14668.0      1.5      0.0              CountMutated,
   163     10000      14724.0      1.5      0.0              CountCrossed,
   164     10000      15021.0      1.5      0.0              StratFlow,
   165     10000      14806.0      1.5      0.0              AvgT,
   166     10000      14808.0      1.5      0.0              TestThreshold,
   167     10000      14790.0      1.5      0.0              PropSignif,
   168     10000      18486.0      1.8      0.0              HighestT,
   169     10000      14965.0      1.5      0.0              AvgAbsT 
   170                                                   )
   171                                           
   172         1          4.0      4.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   173                                                   # It means the simulation has breaked.
   174                                                   results[generation:MAX_GENERATIONS-data.Barr,:] = np.empty((MAX_GENERATIONS - data.Barr - generation,data.variables)) * np.nan
   175                                           
   176         1       2804.0   2804.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   177                                           
   178         1          2.0      2.0      0.0      return df, pop

