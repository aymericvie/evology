         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   86.440541  9.986572e-06  ...    1.171463  110.217204      NaN
1        1.0   94.305569 -4.270114e-07  ...    1.424333  110.486666      NaN
2        2.0   96.301539  4.824251e-06  ...    1.609695  111.551636      NaN
3        3.0  100.567033  4.896079e-06  ...    1.796571  112.364794      NaN
4        4.0  101.380892 -8.208677e-06  ...    1.919435  111.988606      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  417.111262  4.048429e+07  ...   40.424425  114.912104      NaN
9996  9996.0  405.085494  2.421439e-06  ...   40.300894  114.244377      NaN
9997  9997.0  429.935147 -1.244247e-06  ...   40.289004  115.095428      NaN
9998  9998.0  490.264452  7.450581e-09  ...   40.187604  115.537112      NaN
9999  9999.0  559.393182 -7.003546e-07  ...   40.134350  115.244411      NaN

[10000 rows x 70 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 6.57114 s
File: profile/profile.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def main(
    11                                               space,
    12                                               solver,
    13                                               wealth_coordinates,
    14                                               POPULATION_SIZE,
    15                                               MAX_GENERATIONS,
    16                                               PROBA_SELECTION,
    17                                               MUTATION_RATE,
    18                                               tqdm_display,
    19                                               reset_wealth,
    20                                           ):
    21                                               # Initialisation
    22         1          6.0      6.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    23         1       1270.0   1270.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    24         1          2.0      2.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    25                                           
    26                                               # Population creation
    27         1      26658.0  26658.0      0.4      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    28                                           
    29     10002      58558.0      5.9      0.9      for generation in tqdm(
    30         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    31                                               ):
    32     10000      13250.0      1.3      0.2          if CurrentPrice >= 1_000_000:
    33                                                       warnings.warn('Simulation break: price above 1M.')
    34                                                       break
    35                                           
    36                                                   # Population reset
    37     10000      20155.0      2.0      0.3          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    38                                           
    39                                                   # Hypermutation
    40                                                   
    41     20000      40423.0      2.0      0.6          pop, replacements, spoils = ga.hypermutate(
    42     10000      12483.0      1.2      0.2              pop, spoils, replace
    43                                                   ) 
    44     10000      12687.0      1.3      0.2          if replacements < 0:
    45                                                       break
    46                                           
    47                                           
    48                                                   # Strategy evolution
    49                                                   #pop = fit.ComputeFitness(pop, 252)
    50                                           
    51                                                   #pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    52                                                   #    pop,
    53                                                   #    space,
    54                                                   #    generation,
    55                                                   #    wealth_coordinates,
    56                                                   #    PROBA_SELECTION,
    57                                                   #    MUTATION_RATE,
    58                                                   #    252,
    59                                                   #)
    60                                           
    61                                                   # Market decisions 
    62     10000      52514.0      5.3      0.8          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    63     10000     710233.0     71.0     10.8          pop = bsc.NoiseProcess(pop)
    64     10000     194544.0     19.5      3.0          pop = bsc.UpdateFval(pop, dividend)
    65     10000     305307.0     30.5      4.6          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    66                                                   #pop = bsc.DetermineEDF(pop)
    67                                                   
    68                                           
    69                                                   # Market clearing
    70                                                   #'''
    71                                                   #pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72                                                   #    pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   #)
    74                                                   #'''
    75     10000     518689.0     51.9      7.9          CurrentPrice, ToLiquidate = lc.linear_solver(pop, spoils, volume, CurrentPrice)
    76     10000      14811.0      1.5      0.2          price_history = lc.UpdatePriceHistory(price_history, CurrentPrice)
    77     10000    1491627.0    149.2     22.7          pop, mismatch = bsc.CalculateEDV(pop, CurrentPrice)
    78                                           
    79                                                   # Market activity
    80     10000      13587.0      1.4      0.2          (
    81     10000      12617.0      1.3      0.2              pop,
    82     10000      12348.0      1.2      0.2              volume,
    83     10000      12239.0      1.2      0.2              dividend,
    84     10000      12176.0      1.2      0.2              random_dividend,
    85     10000      12392.0      1.2      0.2              dividend_history,
    86     10000      12246.0      1.2      0.2              spoils,
    87     10000      12256.0      1.2      0.2              Liquidations,
    88     20000     656954.0     32.8     10.0          ) = mk.MarketActivity(
    89     10000      12472.0      1.2      0.2              pop,
    90     10000      12270.0      1.2      0.2              CurrentPrice,
    91     10000      12353.0      1.2      0.2              asset_supply,
    92     10000      12133.0      1.2      0.2              dividend,
    93     10000      12223.0      1.2      0.2              dividend_history,
    94     10000      12170.0      1.2      0.2              spoils,
    95     10000      12119.0      1.2      0.2              ToLiquidate,
    96     10000      12566.0      1.3      0.2              random_dividend_history
    97                                                   )
    98     10000      57343.0      5.7      0.9          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    99     10000      15601.0      1.6      0.2          pop = bsc.UpdateQuarterlyWealth(pop, generation)
   100     10000     417253.0     41.7      6.3          pop = bsc.UpdateWealthSeries(pop)
   101                                           
   102     10000    1127814.0    112.8     17.2          pop = iv.Emp_Investment(pop)
   103     10000      13832.0      1.4      0.2          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   104                                           
   105                                                   # Record results 
   106     20000     397745.0     19.9      6.1          results, sim_break = data.record_results(
   107     10000      12622.0      1.3      0.2              results,
   108     10000      12433.0      1.2      0.2              generation,
   109     10000      12338.0      1.2      0.2              CurrentPrice,
   110     10000      12219.0      1.2      0.2              mismatch,
   111     10000      12403.0      1.2      0.2              dividend,
   112     10000      12292.0      1.2      0.2              random_dividend,
   113     10000      12263.0      1.2      0.2              volume,
   114     10000      12288.0      1.2      0.2              replacements,
   115     10000      12488.0      1.2      0.2              pop,
   116     10000      12372.0      1.2      0.2              spoils,
   117     10000      12431.0      1.2      0.2              Liquidations,
   118     10000      12288.0      1.2      0.2              asset_supply,
   119                                                       #CountSelected,
   120                                                       #CountMutated,
   121                                                       #CountCrossed,
   122                                                       #StratFlow,
   123     10000      12335.0      1.2      0.2              AvgT,
   124     10000      12342.0      1.2      0.2              PropSignif,
   125     10000      12334.0      1.2      0.2              HighestT,
   126     10000      12303.0      1.2      0.2              AvgAbsT,
   127                                                   )
   128                                           
   129     10000      13904.0      1.4      0.2          if sim_break == True:
   130                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   131                                                       break
   132                                           
   133         1          4.0      4.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   134         1          9.0      9.0      0.0          results = results[0:generation+1]
   135                                           
   136         1       1545.0   1545.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   137                                           
   138         1          2.0      2.0      0.0      return df, pop

