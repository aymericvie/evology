         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   86.440541  9.986572e-06  ...    1.171463  110.217204      NaN
1        1.0   94.305569 -4.270114e-07  ...    1.424333  110.486666      NaN
2        2.0   96.301539  4.824251e-06  ...    1.609695  111.551636      NaN
3        3.0  100.567033  4.896079e-06  ...    1.796571  112.364794      NaN
4        4.0  101.380892 -8.208677e-06  ...    1.919435  111.988606      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  417.111262  4.048429e+07  ...   40.424425  114.912104      NaN
9996  9996.0  405.085494  2.421439e-06  ...   40.300894  114.244377      NaN
9997  9997.0  429.935147 -1.244247e-06  ...   40.289004  115.095428      NaN
9998  9998.0  490.264452  7.450581e-09  ...   40.187604  115.537112      NaN
9999  9999.0  559.393182 -7.003546e-07  ...   40.134350  115.244411      NaN

[10000 rows x 79 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 7.26735 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           def main(
    12                                               space,
    13                                               solver,
    14                                               wealth_coordinates,
    15                                               POPULATION_SIZE,
    16                                               MAX_GENERATIONS,
    17                                               PROBA_SELECTION,
    18                                               MUTATION_RATE,
    19                                               tqdm_display,
    20                                               reset_wealth,
    21                                           ):
    22                                               # Initialisation
    23         1         16.0     16.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    24         1       2813.0   2813.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    25         1          7.0      7.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    26                                           
    27                                               # Population creation
    28         1      41274.0  41274.0      0.6      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    29                                           
    30     10002      62478.0      6.2      0.9      for generation in tqdm(
    31         1          3.0      3.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    32                                               ):
    33     10000      14134.0      1.4      0.2          if CurrentPrice >= 1_000_000:
    34                                                       warnings.warn('Simulation break: price above 1M.')
    35                                                       break
    36                                           
    37                                                   # Population reset
    38     10000      20471.0      2.0      0.3          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    39                                           
    40                                                   # Hypermutation
    41                                                   
    42     20000      42258.0      2.1      0.6          pop, replacements, spoils = ga.hypermutate(
    43     10000      13444.0      1.3      0.2              pop, spoils, replace
    44                                                   ) 
    45     10000      13764.0      1.4      0.2          if replacements < 0:
    46                                                       break
    47                                           
    48                                           
    49                                                   # Strategy evolution
    50     10000      49169.0      4.9      0.7          pop = fit.ComputeFitness(pop, 252)
    51     20000     112285.0      5.6      1.5          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    52     10000      13311.0      1.3      0.2              pop,
    53     10000      13254.0      1.3      0.2              space,
    54     10000      13051.0      1.3      0.2              generation,
    55     10000      13020.0      1.3      0.2              wealth_coordinates,
    56     10000      13044.0      1.3      0.2              PROBA_SELECTION,
    57     10000      13109.0      1.3      0.2              MUTATION_RATE,
    58     10000      13409.0      1.3      0.2              252,
    59                                                   )
    60                                           
    61                                                   # Market decisions 
    62     10000      53069.0      5.3      0.7          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    63     10000     696477.0     69.6      9.6          pop = bsc.NoiseProcess(pop)
    64     10000     193205.0     19.3      2.7          pop = bsc.UpdateFval(pop, dividend)
    65     10000     299104.0     29.9      4.1          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    66     10000     416296.0     41.6      5.7          pop = bsc.DetermineEDF(pop)
    67                                                   
    68                                           
    69                                                   # Market clearing
    70                                                   #'''
    71                                                   #pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72                                                   #    pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   #)
    74                                                   #'''
    75     10000     510472.0     51.0      7.0          CurrentPrice, ToLiquidate = lc.linear_solver(pop, spoils, volume, CurrentPrice)
    76     10000      15087.0      1.5      0.2          price_history = lc.UpdatePriceHistory(price_history, CurrentPrice)
    77     10000    1473137.0    147.3     20.3          pop, mismatch = bsc.CalculateEDV(pop, CurrentPrice)
    78                                           
    79                                                   # Market activity
    80     10000      14193.0      1.4      0.2          (
    81     10000      13584.0      1.4      0.2              pop,
    82     10000      13324.0      1.3      0.2              volume,
    83     10000      13227.0      1.3      0.2              dividend,
    84     10000      13228.0      1.3      0.2              random_dividend,
    85     10000      13252.0      1.3      0.2              dividend_history,
    86     10000      13211.0      1.3      0.2              spoils,
    87     10000      13125.0      1.3      0.2              Liquidations,
    88     20000     626724.0     31.3      8.6          ) = mk.MarketActivity(
    89     10000      13285.0      1.3      0.2              pop,
    90     10000      13143.0      1.3      0.2              CurrentPrice,
    91     10000      12991.0      1.3      0.2              asset_supply,
    92     10000      12964.0      1.3      0.2              dividend,
    93     10000      12932.0      1.3      0.2              dividend_history,
    94     10000      12933.0      1.3      0.2              spoils,
    95     10000      13009.0      1.3      0.2              ToLiquidate,
    96     10000      13688.0      1.4      0.2              random_dividend_history
    97                                                   )
    98     10000      60455.0      6.0      0.8          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    99     10000      16792.0      1.7      0.2          pop = bsc.UpdateQuarterlyWealth(pop, generation)
   100     10000     411213.0     41.1      5.7          pop = bsc.UpdateWealthSeries(pop)
   101                                           
   102     10000    1129820.0    113.0     15.5          pop = iv.Emp_Investment(pop)
   103     10000      14879.0      1.5      0.2          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   104                                           
   105                                                   # Record results 
   106     20000     393229.0     19.7      5.4          results, sim_break = data.record_results(
   107     10000      13377.0      1.3      0.2              results,
   108     10000      13309.0      1.3      0.2              generation,
   109     10000      13104.0      1.3      0.2              CurrentPrice,
   110     10000      13073.0      1.3      0.2              mismatch,
   111     10000      13096.0      1.3      0.2              dividend,
   112     10000      13144.0      1.3      0.2              random_dividend,
   113     10000      13136.0      1.3      0.2              volume,
   114     10000      13122.0      1.3      0.2              replacements,
   115     10000      13185.0      1.3      0.2              pop,
   116     10000      13252.0      1.3      0.2              spoils,
   117     10000      13278.0      1.3      0.2              Liquidations,
   118     10000      13257.0      1.3      0.2              asset_supply,
   119     10000      13270.0      1.3      0.2              CountSelected,
   120     10000      13295.0      1.3      0.2              CountMutated,
   121     10000      13283.0      1.3      0.2              CountCrossed,
   122     10000      13329.0      1.3      0.2              StratFlow,
   123     10000      13326.0      1.3      0.2              AvgT,
   124     10000      13398.0      1.3      0.2              PropSignif,
   125     10000      13358.0      1.3      0.2              HighestT,
   126     10000      13286.0      1.3      0.2              AvgAbsT,
   127                                                   )
   128                                           
   129     10000      14827.0      1.5      0.2          if sim_break == True:
   130                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   131                                                       break
   132                                           
   133         1          2.0      2.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   134         1          8.0      8.0      0.0          results = results[0:generation+1]
   135                                           
   136         1       1274.0   1274.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   137                                           
   138         1          2.0      2.0      0.0      return df, pop

