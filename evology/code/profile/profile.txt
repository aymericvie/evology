Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 30.5096 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               mode,
    14                                               space,
    15                                               solver,
    16                                               MAX_GENERATIONS,
    17                                               PROBA_SELECTION,
    18                                               POPULATION_SIZE,
    19                                               MUTATION_RATE,
    20                                               wealth_coordinates,
    21                                               tqdm_display,
    22                                               reset_wealth,
    23                                               ReinvestmentRate
    24                                           ):
    25                                               # Initialise important variables and dataframe to store results
    26         1          1.0      1.0      0.0      ReturnsNT, ReturnsVI, ReturnsTF = (
    27         1       1809.0   1809.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    28         1       2021.0   2021.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29         1       1929.0   1929.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30                                               )
    31         1          3.0      3.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    32         1       1195.0   1195.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    33         1       1970.0   1970.0      0.0      wealth_tracker = np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    34         1          3.0      3.0      0.0      price_history, dividend_history = [], []
    35                                           
    36         1       2466.0   2466.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    37         1         41.0     41.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    38         1         28.0     28.0      0.0      bs.UpdatePrevWealth(pop)
    39                                           
    40     10002      76517.0      7.7      0.3      for generation in tqdm(
    41         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    42                                               ):
    43                                           
    44                                                   # Population reset
    45     10000      64729.0      6.5      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    46                                           
    47                                                   # Hypermutation
    48     20000    2679434.0    134.0      8.8          pop, replacements, spoils = ga.hypermutate(
    49     10000      10389.0      1.0      0.0              pop,
    50     10000      10342.0      1.0      0.0              mode,
    51     10000      10244.0      1.0      0.0              asset_supply,
    52     10000      10178.0      1.0      0.0              CurrentPrice,
    53     10000      10117.0      1.0      0.0              generation,
    54     10000      10129.0      1.0      0.0              spoils,
    55     10000      10156.0      1.0      0.0              wealth_coordinates,
    56                                                   )  # Replace insolvent agents
    57                                           
    58                                                   # Strategy evolution
    59     20000    4842320.0    242.1     15.9          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    60     10000      10789.0      1.1      0.0              pop,
    61     10000      10464.0      1.0      0.0              mode,
    62     10000      10514.0      1.1      0.0              space,
    63     10000      10500.0      1.1      0.0              generation,
    64     10000      10523.0      1.1      0.0              wealth_coordinates,
    65     10000      10463.0      1.0      0.0              PROBA_SELECTION,
    66     10000      10537.0      1.1      0.0              MUTATION_RATE,
    67                                                   )
    68                                           
    69                                                   # Calculate wealth and previous wealth
    70     10000     357737.0     35.8      1.2          bs.calculate_wealth(pop, CurrentPrice)
    71     10000     217578.0     21.8      0.7          bs.UpdatePrevWealth(pop)
    72                                           
    73                                                   # Market decisions (tsv, proc, edf)
    74     10000    7396055.0    739.6     24.2          pop = decision_updates(pop, mode, price_history, dividend_history)
    75                                           
    76                                                   # Market clearing
    77     20000    5473935.0    273.7     17.9          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    78     10000      11517.0      1.2      0.0              pop, CurrentPrice, price_history, spoils, solver
    79                                                   )
    80                                           
    81                                                   # Market execution
    82     10000      11703.0      1.2      0.0          (
    83     10000      10764.0      1.1      0.0              pop,
    84     10000      10719.0      1.1      0.0              volume,
    85     10000      10599.0      1.1      0.0              dividend,
    86     10000      10611.0      1.1      0.0              random_dividend,
    87     10000      10482.0      1.0      0.0              dividend_history,
    88     10000      10577.0      1.1      0.0              spoils,
    89     20000    3288179.0    164.4     10.8          ) = marketActivity(
    90     10000      10759.0      1.1      0.0              pop,
    91     10000      10465.0      1.0      0.0              CurrentPrice,
    92     10000      10416.0      1.0      0.0              asset_supply,
    93     10000      10360.0      1.0      0.0              dividend,
    94     10000      10376.0      1.0      0.0              dividend_history,
    95     10000      10349.0      1.0      0.0              spoils,
    96     10000      10374.0      1.0      0.0              ToLiquidate,
    97                                                   )
    98                                           
    99                                                   # Earnings, compute profits, age
   100     20000    2042965.0    102.1      6.7          pop = update_wealth(
   101     10000      10660.0      1.1      0.0              pop,
   102     10000      10593.0      1.1      0.0              CurrentPrice,
   103     10000      10608.0      1.1      0.0              ReinvestmentRate
   104                                                   )
   105                                           
   106                                                   # Record results
   107     20000    3518669.0    175.9     11.5          results, wealth_tracker, ReturnsNT, ReturnsVI, ReturnsTF = data.record_results(
   108     10000      10748.0      1.1      0.0              results,
   109     10000      10664.0      1.1      0.0              wealth_tracker,
   110     10000      10595.0      1.1      0.0              generation,
   111     10000      10585.0      1.1      0.0              CurrentPrice,
   112     10000      10600.0      1.1      0.0              mismatch,
   113     10000      10550.0      1.1      0.0              dividend,
   114     10000      10568.0      1.1      0.0              random_dividend,
   115     10000      10608.0      1.1      0.0              volume,
   116     10000      10566.0      1.1      0.0              replacements,
   117     10000      10548.0      1.1      0.0              pop,
   118     10000      10571.0      1.1      0.0              spoils,
   119     10000      10533.0      1.1      0.0              asset_supply,
   120     10000      10663.0      1.1      0.0              ReturnsNT,
   121     10000      10627.0      1.1      0.0              ReturnsVI,
   122     10000      10600.0      1.1      0.0              ReturnsTF,
   123     10000      10584.0      1.1      0.0              CountSelected,
   124     10000      10656.0      1.1      0.0              CountMutated,
   125     10000      10583.0      1.1      0.0              CountCrossed,
   126     10000      10636.0      1.1      0.0              StratFlow,
   127                                                   )
   128                                           
   129         1       1212.0   1212.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   130                                           
   131         1          1.0      1.0      0.0      return df, pop

