         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   91.129184  1.047342e-05  ...    0.999523  110.129999      NaN
1        1.0   92.483731 -3.282912e-06  ...    0.998289  109.760945      NaN
2        2.0   92.673047 -5.337351e-07  ...    0.998878  110.278436      NaN
3        3.0   92.605585  1.649084e-05  ...    0.999333  110.141358      NaN
4        4.0   92.950801  1.048989e-06  ...    0.998988  110.796503      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  802.870030 -2.070330e-06  ...    1.008875  388.725747      NaN
9996  9996.0  779.882613 -1.136679e-06  ...    1.008998  384.782478      NaN
9997  9997.0  760.264245 -8.111820e-07  ...    1.008092  382.638243      NaN
9998  9998.0  762.648271 -4.312024e-07  ...    1.007708  383.326776      NaN
9999  9999.0  784.552336 -3.227033e-06  ...    1.006872  384.016594      NaN

[10000 rows x 79 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 49.1793 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               tqdm_display,
    21                                               reset_wealth,
    22                                           ):
    23                                               # Initialisation
    24         1         22.0     22.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    25         1       3960.0   3960.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    26         1          5.0      5.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    27                                           
    28                                               # Population creation
    29         1      53298.0  53298.0      0.1      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    30                                           
    31     10002     141576.0     14.2      0.3      for generation in tqdm(
    32         1          3.0      3.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    33                                               ):
    34     10000      22897.0      2.3      0.0          if CurrentPrice >= 1_000_000:
    35                                                       warnings.warn('Simulation break: price above 1M.')
    36                                                       break
    37                                           
    38                                                   # Population reset
    39     10000      36354.0      3.6      0.1          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    40                                           
    41                                                   # Hypermutation
    42                                                   
    43     20000      71262.0      3.6      0.1          pop, replacements, spoils = ga.hypermutate(
    44     10000      21704.0      2.2      0.0              pop, spoils, replace
    45                                                   ) 
    46     10000      22485.0      2.2      0.0          if replacements < 0:
    47                                                       break
    48                                           
    49                                           
    50                                                   # Strategy evolution
    51     10000      85213.0      8.5      0.2          pop = fit.ComputeFitness(pop, 252)
    52     20000     188917.0      9.4      0.4          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    53     10000      21652.0      2.2      0.0              pop,
    54     10000      21433.0      2.1      0.0              space,
    55     10000      21079.0      2.1      0.0              generation,
    56     10000      21133.0      2.1      0.0              wealth_coordinates,
    57     10000      21167.0      2.1      0.0              PROBA_SELECTION,
    58     10000      21178.0      2.1      0.0              MUTATION_RATE,
    59     10000      21836.0      2.2      0.0              252,
    60                                                   )
    61                                           
    62                                                   # Market decisions 
    63     10000      93015.0      9.3      0.2          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    64     10000    2546799.0    254.7      5.2          pop = bsc.NoiseProcess(pop)
    65     10000     318136.0     31.8      0.6          pop = bsc.UpdateFval(pop, dividend)
    66     10000     497220.0     49.7      1.0          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    67     10000    1118329.0    111.8      2.3          pop = bsc.DetermineEDF(pop)
    68                                                   
    69                                           
    70                                                   # Market clearing
    71     20000    1260853.0     63.0      2.6          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72     10000      22356.0      2.2      0.0              pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   )
    74                                           
    75     10000    2951517.0    295.2      6.0          pop = bsc.CalculateEDV(pop, CurrentPrice)
    76                                           
    77                                                   # Market activity
    78     10000      23548.0      2.4      0.0          (
    79     10000      22112.0      2.2      0.0              pop,
    80     10000      21555.0      2.2      0.0              volume,
    81     10000      21439.0      2.1      0.0              dividend,
    82     10000      21453.0      2.1      0.0              random_dividend,
    83     10000      21576.0      2.2      0.0              dividend_history,
    84     10000      21503.0      2.2      0.0              spoils,
    85     10000      21424.0      2.1      0.0              Liquidations,
    86     20000    1015526.0     50.8      2.1          ) = mk.MarketActivity(
    87     10000      21726.0      2.2      0.0              pop,
    88     10000      21503.0      2.2      0.0              CurrentPrice,
    89     10000      21100.0      2.1      0.0              asset_supply,
    90     10000      21180.0      2.1      0.0              dividend,
    91     10000      21109.0      2.1      0.0              dividend_history,
    92     10000      21150.0      2.1      0.0              spoils,
    93     10000      21220.0      2.1      0.0              ToLiquidate,
    94     10000      22204.0      2.2      0.0              random_dividend_history
    95                                                   )
    96     10000     108135.0     10.8      0.2          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    97     10000      27747.0      2.8      0.1          pop = bsc.UpdateQuarterlyWealth(pop, generation)
    98     10000     728064.0     72.8      1.5          pop = bsc.UpdateWealthSeries(pop)
    99                                           
   100                                                   # Investment
   101                                                   ''' former investment process
   102                                                   (pop, AvgT, PropSignif, HighestT, AvgAbsT) = iv.Profit_Investment(
   103                                                   pop, ReinvestmentRate, InvestmentHorizon, generation
   104                                                   )
   105                                                   '''
   106                                           
   107     10000   36182924.0   3618.3     73.6          pop = iv.Emp_Investment(pop)
   108     10000      24633.0      2.5      0.1          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   109                                           
   110                                                   # Record results 
   111     20000     677922.0     33.9      1.4          results, sim_break = data.record_results(
   112     10000      21868.0      2.2      0.0              results,
   113     10000      21862.0      2.2      0.0              generation,
   114     10000      21607.0      2.2      0.0              CurrentPrice,
   115     10000      21518.0      2.2      0.0              mismatch,
   116     10000      21597.0      2.2      0.0              dividend,
   117     10000      21652.0      2.2      0.0              random_dividend,
   118     10000      21621.0      2.2      0.0              volume,
   119     10000      21533.0      2.2      0.0              replacements,
   120     10000      21586.0      2.2      0.0              pop,
   121     10000      21674.0      2.2      0.0              spoils,
   122     10000      21679.0      2.2      0.0              Liquidations,
   123     10000      21602.0      2.2      0.0              asset_supply,
   124     10000      21636.0      2.2      0.0              CountSelected,
   125     10000      21679.0      2.2      0.0              CountMutated,
   126     10000      21711.0      2.2      0.0              CountCrossed,
   127     10000      22018.0      2.2      0.0              StratFlow,
   128     10000      21837.0      2.2      0.0              AvgT,
   129     10000      21863.0      2.2      0.0              PropSignif,
   130     10000      21772.0      2.2      0.0              HighestT,
   131     10000      21765.0      2.2      0.0              AvgAbsT,
   132                                                   )
   133                                           
   134     10000      24137.0      2.4      0.0          if sim_break == True:
   135                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   136                                                       break
   137                                           
   138         1          3.0      3.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   139         1         12.0     12.0      0.0          results = results[0:generation+1]
   140                                           
   141         1       4936.0   4936.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   142                                           
   143         1          3.0      3.0      0.0      return df, pop

