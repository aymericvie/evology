         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   91.129184  1.047342e-05  ...    0.999523  110.129999      NaN
1        1.0   92.575245 -3.222493e-06  ...    1.000136  109.771802      NaN
2        2.0   92.864604  1.612119e-06  ...    0.998634  110.690410      NaN
3        3.0   93.035641 -1.255091e-05  ...    0.998192  111.106676      NaN
4        4.0   92.797756 -3.219029e-06  ...    0.997508  110.659891      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  237.172361  7.692724e-07  ...    1.030001  111.353127      NaN
9996  9996.0  255.986717  4.263595e-06  ...    1.028488  110.706378      NaN
9997  9997.0  274.432862  7.003546e-07  ...    1.028291  111.530819      NaN
9998  9998.0  285.338825  1.074746e-06  ...    1.026979  111.958713      NaN
9999  9999.0  318.608163 -2.292916e-06  ...    1.026181  111.674946      NaN

[10000 rows x 79 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 24.9875 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               space,
    14                                               solver,
    15                                               wealth_coordinates,
    16                                               POPULATION_SIZE,
    17                                               MAX_GENERATIONS,
    18                                               PROBA_SELECTION,
    19                                               MUTATION_RATE,
    20                                               tqdm_display,
    21                                               reset_wealth,
    22                                           ):
    23                                               # Initialisation
    24         1         10.0     10.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    25         1       2038.0   2038.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    26         1          3.0      3.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    27                                           
    28                                               # Population creation
    29         1      43674.0  43674.0      0.2      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    30                                           
    31     10002     113715.0     11.4      0.5      for generation in tqdm(
    32         1          3.0      3.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    33                                               ):
    34     10000      22768.0      2.3      0.1          if CurrentPrice >= 1_000_000:
    35                                                       warnings.warn('Simulation break: price above 1M.')
    36                                                       break
    37                                           
    38                                                   # Population reset
    39     10000      35582.0      3.6      0.1          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    40                                           
    41                                                   # Hypermutation
    42                                                   
    43     20000      70711.0      3.5      0.3          pop, replacements, spoils = ga.hypermutate(
    44     10000      21737.0      2.2      0.1              pop, spoils, replace
    45                                                   ) 
    46     10000      21869.0      2.2      0.1          if replacements < 0:
    47                                                       break
    48                                           
    49                                           
    50                                                   # Strategy evolution
    51     10000      80687.0      8.1      0.3          pop = fit.ComputeFitness(pop, 252)
    52     20000     188121.0      9.4      0.8          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    53     10000      21406.0      2.1      0.1              pop,
    54     10000      21342.0      2.1      0.1              space,
    55     10000      20905.0      2.1      0.1              generation,
    56     10000      20968.0      2.1      0.1              wealth_coordinates,
    57     10000      20877.0      2.1      0.1              PROBA_SELECTION,
    58     10000      21005.0      2.1      0.1              MUTATION_RATE,
    59     10000      21503.0      2.2      0.1              252,
    60                                                   )
    61                                           
    62                                                   # Market decisions 
    63     10000      88579.0      8.9      0.4          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    64     10000    2599820.0    260.0     10.4          pop = bsc.NoiseProcess(pop)
    65     10000     317909.0     31.8      1.3          pop = bsc.UpdateFval(pop, dividend)
    66     10000     512189.0     51.2      2.0          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    67     10000    1138202.0    113.8      4.6          pop = bsc.DetermineEDF(pop)
    68                                                   
    69                                           
    70                                                   # Market clearing
    71     20000    1268264.0     63.4      5.1          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72     10000      22267.0      2.2      0.1              pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   )
    74                                           
    75     10000    3063321.0    306.3     12.3          pop = bsc.CalculateEDV(pop, CurrentPrice)
    76                                           
    77                                                   # Market activity
    78     10000      23624.0      2.4      0.1          (
    79     10000      21905.0      2.2      0.1              pop,
    80     10000      21423.0      2.1      0.1              volume,
    81     10000      21371.0      2.1      0.1              dividend,
    82     10000      21312.0      2.1      0.1              random_dividend,
    83     10000      21415.0      2.1      0.1              dividend_history,
    84     10000      21427.0      2.1      0.1              spoils,
    85     10000      21345.0      2.1      0.1              Liquidations,
    86     20000    1073171.0     53.7      4.3          ) = mk.MarketActivity(
    87     10000      21507.0      2.2      0.1              pop,
    88     10000      21347.0      2.1      0.1              CurrentPrice,
    89     10000      21164.0      2.1      0.1              asset_supply,
    90     10000      20979.0      2.1      0.1              dividend,
    91     10000      21000.0      2.1      0.1              dividend_history,
    92     10000      20935.0      2.1      0.1              spoils,
    93     10000      21070.0      2.1      0.1              ToLiquidate,
    94     10000      21978.0      2.2      0.1              random_dividend_history
    95                                                   )
    96     10000      99315.0      9.9      0.4          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
    97     10000      26579.0      2.7      0.1          pop = bsc.UpdateQuarterlyWealth(pop, generation)
    98     10000     685221.0     68.5      2.7          pop = bsc.UpdateWealthSeries(pop)
    99                                           
   100                                                   # Investment
   101                                                   ''' former investment process
   102                                                   (pop, AvgT, PropSignif, HighestT, AvgAbsT) = iv.Profit_Investment(
   103                                                   pop, ReinvestmentRate, InvestmentHorizon, generation
   104                                                   )
   105                                                   '''
   106                                           
   107     10000   11840172.0   1184.0     47.4          pop = iv.Emp_Investment(pop)
   108     10000      24852.0      2.5      0.1          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   109                                           
   110                                                   # Record results 
   111     20000     672172.0     33.6      2.7          results, sim_break = data.record_results(
   112     10000      22019.0      2.2      0.1              results,
   113     10000      21705.0      2.2      0.1              generation,
   114     10000      21591.0      2.2      0.1              CurrentPrice,
   115     10000      21532.0      2.2      0.1              mismatch,
   116     10000      21505.0      2.2      0.1              dividend,
   117     10000      21609.0      2.2      0.1              random_dividend,
   118     10000      21555.0      2.2      0.1              volume,
   119     10000      21478.0      2.1      0.1              replacements,
   120     10000      21621.0      2.2      0.1              pop,
   121     10000      21677.0      2.2      0.1              spoils,
   122     10000      21620.0      2.2      0.1              Liquidations,
   123     10000      21647.0      2.2      0.1              asset_supply,
   124     10000      21835.0      2.2      0.1              CountSelected,
   125     10000      21593.0      2.2      0.1              CountMutated,
   126     10000      21728.0      2.2      0.1              CountCrossed,
   127     10000      21709.0      2.2      0.1              StratFlow,
   128     10000      21794.0      2.2      0.1              AvgT,
   129     10000      21718.0      2.2      0.1              PropSignif,
   130     10000      21734.0      2.2      0.1              HighestT,
   131     10000      21600.0      2.2      0.1              AvgAbsT,
   132                                                   )
   133                                           
   134     10000      24352.0      2.4      0.1          if sim_break == True:
   135                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   136                                                       break
   137                                           
   138         1          7.0      7.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   139         1          8.0      8.0      0.0          results = results[0:generation+1]
   140                                           
   141         1       5090.0   5090.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   142                                           
   143         1          3.0      3.0      0.0      return df, pop

