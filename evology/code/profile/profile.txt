         Gen   Price      Mismatch  ...  FromVI  FromTF  WealthAmp
0        0.0   94.76  3.743880e+04  ...     0.0     0.0        NaN
1        1.0   87.21  2.172882e+04  ...     0.0     0.0        NaN
2        2.0   80.43  2.517917e+04  ...     0.0     0.0        NaN
3        3.0   74.60 -1.263830e+03  ...     0.0     0.0        NaN
4        4.0   70.85  1.360506e+04  ...     0.0     0.0        NaN
...      ...     ...           ...  ...     ...     ...        ...
9932  9932.0  170.50 -2.923720e+07  ...     0.0     0.0  26.050437
9933  9933.0  168.89 -1.535605e+07  ...     0.0     0.0  21.515301
9934  9934.0  168.36  6.046405e+06  ...     0.0     0.0  23.458954
9935  9935.0  170.49 -1.618432e+07  ...     0.0     0.0  26.933659
9936  9936.0  171.82  2.169722e+07  ...     0.0     0.0  36.901240

[9937 rows x 59 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 30.5069 s
File: profile/profile.py
Function: main at line 10

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    10                                           @profile
    11                                           
    12                                           def main(
    13                                               mode,
    14                                               space,
    15                                               solver,
    16                                               MAX_GENERATIONS,
    17                                               PROBA_SELECTION,
    18                                               POPULATION_SIZE,
    19                                               MUTATION_RATE,
    20                                               wealth_coordinates,
    21                                               tqdm_display,
    22                                               reset_wealth,
    23                                               ReinvestmentRate
    24                                           ):
    25                                               # Initialise important variables and dataframe to store results
    26         1          2.0      2.0      0.0      ReturnsNT, ReturnsVI, ReturnsTF = (
    27         1       4839.0   4839.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    28         1       2627.0   2627.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    29         1       1921.0   1921.0      0.0          np.zeros((MAX_GENERATIONS - data.Barr, POPULATION_SIZE)),
    30                                               )
    31         1          4.0      4.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    32         1       1125.0   1125.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    33         1       2009.0   2009.0      0.0      wealth_tracker = np.zeros((MAX_GENERATIONS, POPULATION_SIZE))
    34         1          2.0      2.0      0.0      price_history, dividend_history = [], []
    35                                           
    36         1       2680.0   2680.0      0.0      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates)
    37         1         45.0     45.0      0.0      bs.calculate_wealth(pop, CurrentPrice)
    38         1         24.0     24.0      0.0      bs.UpdatePrevWealth(pop)
    39                                           
    40     10002      77662.0      7.8      0.3      for generation in tqdm(
    41         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    42                                               ):
    43                                           
    44                                                   # Population reset
    45     10000      64614.0      6.5      0.2          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    46                                           
    47                                                   # Hypermutation
    48     20000    2666639.0    133.3      8.7          pop, replacements, spoils = ga.hypermutate(
    49     10000      10558.0      1.1      0.0              pop,
    50     10000      10465.0      1.0      0.0              mode,
    51     10000      10221.0      1.0      0.0              asset_supply,
    52     10000      10188.0      1.0      0.0              CurrentPrice,
    53     10000      10231.0      1.0      0.0              generation,
    54     10000      10187.0      1.0      0.0              spoils,
    55     10000      10208.0      1.0      0.0              wealth_coordinates,
    56                                                   )  # Replace insolvent agents
    57                                           
    58                                                   # Strategy evolution
    59     20000    4870694.0    243.5     16.0          pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    60     10000      10755.0      1.1      0.0              pop,
    61     10000      10571.0      1.1      0.0              mode,
    62     10000      10569.0      1.1      0.0              space,
    63     10000      10528.0      1.1      0.0              generation,
    64     10000      10471.0      1.0      0.0              wealth_coordinates,
    65     10000      10491.0      1.0      0.0              PROBA_SELECTION,
    66     10000      10584.0      1.1      0.0              MUTATION_RATE,
    67                                                   )
    68                                           
    69                                                   # Calculate wealth and previous wealth
    70     10000     355756.0     35.6      1.2          bs.calculate_wealth(pop, CurrentPrice)
    71     10000     215735.0     21.6      0.7          bs.UpdatePrevWealth(pop)
    72                                           
    73                                                   # Market decisions (tsv, proc, edf)
    74     10000    7471427.0    747.1     24.5          pop = decision_updates(pop, mode, price_history, dividend_history)
    75                                           
    76                                                   # Market clearing
    77     20000    5423653.0    271.2     17.8          pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    78     10000      11477.0      1.1      0.0              pop, CurrentPrice, price_history, spoils, solver
    79                                                   )
    80                                           
    81                                                   # Market execution
    82     10000      11651.0      1.2      0.0          (
    83     10000      10768.0      1.1      0.0              pop,
    84     10000      10833.0      1.1      0.0              volume,
    85     10000      10618.0      1.1      0.0              dividend,
    86     10000      10757.0      1.1      0.0              random_dividend,
    87     10000      10584.0      1.1      0.0              dividend_history,
    88     10000      10607.0      1.1      0.0              spoils,
    89     20000    3270757.0    163.5     10.7          ) = marketActivity(
    90     10000      10677.0      1.1      0.0              pop,
    91     10000      10379.0      1.0      0.0              CurrentPrice,
    92     10000      10367.0      1.0      0.0              asset_supply,
    93     10000      10327.0      1.0      0.0              dividend,
    94     10000      10326.0      1.0      0.0              dividend_history,
    95     10000      10340.0      1.0      0.0              spoils,
    96     10000      10419.0      1.0      0.0              ToLiquidate,
    97                                                   )
    98                                           
    99                                                   # Earnings, compute profits, age
   100     20000    2008037.0    100.4      6.6          pop = update_wealth(
   101     10000      10695.0      1.1      0.0              pop,
   102     10000      10635.0      1.1      0.0              CurrentPrice,
   103     10000      10667.0      1.1      0.0              ReinvestmentRate
   104                                                   )
   105                                           
   106                                                   # Record results
   107     20000    3520314.0    176.0     11.5          results, wealth_tracker, ReturnsNT, ReturnsVI, ReturnsTF = data.record_results(
   108     10000      10931.0      1.1      0.0              results,
   109     10000      10729.0      1.1      0.0              wealth_tracker,
   110     10000      10761.0      1.1      0.0              generation,
   111     10000      10686.0      1.1      0.0              CurrentPrice,
   112     10000      10813.0      1.1      0.0              mismatch,
   113     10000      10646.0      1.1      0.0              dividend,
   114     10000      10741.0      1.1      0.0              random_dividend,
   115     10000      10679.0      1.1      0.0              volume,
   116     10000      10721.0      1.1      0.0              replacements,
   117     10000      10774.0      1.1      0.0              pop,
   118     10000      10777.0      1.1      0.0              spoils,
   119     10000      10735.0      1.1      0.0              asset_supply,
   120     10000      10705.0      1.1      0.0              ReturnsNT,
   121     10000      10691.0      1.1      0.0              ReturnsVI,
   122     10000      10707.0      1.1      0.0              ReturnsTF,
   123     10000      10777.0      1.1      0.0              CountSelected,
   124     10000      10709.0      1.1      0.0              CountMutated,
   125     10000      10750.0      1.1      0.0              CountCrossed,
   126     10000      10762.0      1.1      0.0              StratFlow,
   127                                                   )
   128                                           
   129         1       4042.0   4042.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   130                                           
   131         1          2.0      2.0      0.0      return df, pop

