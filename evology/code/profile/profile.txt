         Gen       Price      Mismatch  ...  NT_process      VI_val  nav_pct
0        0.0   76.137789  8.253381e-06  ...    0.857826  110.224949      NaN
1        1.0   76.557484 -1.444854e-05  ...    0.737572  109.655055      NaN
2        2.0   83.913581 -1.545204e-05  ...    0.919954  111.236306      NaN
3        3.0   81.445692  1.099659e-05  ...    0.850402  111.454866      NaN
4        4.0   79.007717  1.113373e-05  ...    0.770410  110.791747      NaN
...      ...         ...           ...  ...         ...         ...      ...
9995  9995.0  190.759348  3.020121e+08  ...    0.742786  105.563771      NaN
9996  9996.0  238.449185  4.516490e+08  ...    0.884924  105.230420      NaN
9997  9997.0  178.836889 -5.369611e+08  ...    0.812117  105.668257      NaN
9998  9998.0  205.602137 -7.711351e-07  ...    0.800044  106.158355      NaN
9999  9999.0  195.926753 -3.632158e-07  ...    0.786921  105.855700      NaN

[10000 rows x 70 columns]
Wrote profile results to profile.py.lprof
Timer unit: 1e-06 s

Total time: 5.75596 s
File: profile/profile.py
Function: main at line 9

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     9                                           @profile
    10                                           def main(
    11                                               space,
    12                                               solver,
    13                                               wealth_coordinates,
    14                                               POPULATION_SIZE,
    15                                               MAX_GENERATIONS,
    16                                               PROBA_SELECTION,
    17                                               MUTATION_RATE,
    18                                               tqdm_display,
    19                                               reset_wealth,
    20                                           ):
    21                                               # Initialisation
    22         1         10.0     10.0      0.0      generation, CurrentPrice, dividend, spoils = 0, InitialPrice, INITIAL_DIVIDEND, 0
    23         1       1382.0   1382.0      0.0      results = np.zeros((MAX_GENERATIONS - data.Barr, data.variables))
    24         1          3.0      3.0      0.0      price_history, dividend_history, replace, volume, avg_phi = [], [], 0, 0.0, 0.0
    25                                           
    26                                               # Population creation
    27         1      32990.0  32990.0      0.6      pop, asset_supply = cr.CreatePop(POPULATION_SIZE, space, wealth_coordinates, CurrentPrice)
    28                                           
    29     10002      60665.0      6.1      1.1      for generation in tqdm(
    30         1          2.0      2.0      0.0          range(MAX_GENERATIONS), disable=tqdm_display, miniters=100, mininterval=0.5
    31                                               ):
    32     10000      13567.0      1.4      0.2          if CurrentPrice >= 1_000_000:
    33                                                       warnings.warn('Simulation break: price above 1M.')
    34                                                       break
    35                                           
    36                                                   # Population reset
    37     10000      19821.0      2.0      0.3          pop = cr.WealthReset(pop, space, wealth_coordinates, generation, reset_wealth)
    38                                           
    39                                                   # Hypermutation
    40                                                   
    41     20000      42096.0      2.1      0.7          pop, replacements, spoils = ga.hypermutate(
    42     10000      13126.0      1.3      0.2              pop, spoils, replace
    43                                                   ) 
    44     10000      13513.0      1.4      0.2          if replacements < 0:
    45                                                       break
    46                                           
    47                                           
    48                                                   # Strategy evolution
    49                                                   #pop = fit.ComputeFitness(pop, 252)
    50                                           
    51                                                   #pop, CountSelected, CountMutated, CountCrossed, StratFlow = ga_evolution(
    52                                                   #    pop,
    53                                                   #    space,
    54                                                   #    generation,
    55                                                   #    wealth_coordinates,
    56                                                   #    PROBA_SELECTION,
    57                                                   #    MUTATION_RATE,
    58                                                   #    252,
    59                                                   #)
    60                                           
    61                                                   # Market decisions 
    62     10000      53219.0      5.3      0.9          pop, replace = bsc.UpdateFullWealth(pop, CurrentPrice)
    63     10000     605451.0     60.5     10.5          pop = bsc.NoiseProcess(pop)
    64     10000     192367.0     19.2      3.3          pop = bsc.UpdateFval(pop, dividend)
    65     10000     301466.0     30.1      5.2          pop = bsc.CalculateTSV(pop, price_history, dividend_history, CurrentPrice)
    66                                                   #pop = bsc.DetermineEDF(pop)
    67                                                   
    68                                           
    69                                                   # Market clearing
    70                                                   #'''
    71                                                   #pop, mismatch, CurrentPrice, price_history, ToLiquidate = marketClearing(
    72                                                   #    pop, CurrentPrice, price_history, spoils, solver, volume
    73                                                   #)
    74                                                   #'''
    75     10000     470067.0     47.0      8.2          CurrentPrice, ToLiquidate = lc.linear_solver(pop, spoils, volume, CurrentPrice)
    76     10000      14608.0      1.5      0.3          price_history = lc.UpdatePriceHistory(price_history, CurrentPrice)
    77     10000     952327.0     95.2     16.5          pop, mismatch = bsc.CalculateEDV(pop, CurrentPrice)
    78                                           
    79                                                   # Market activity
    80                                                   '''
    81                                                   (
    82                                                       pop,
    83                                                       volume,
    84                                                       dividend,
    85                                                       random_dividend,
    86                                                       dividend_history,
    87                                                       spoils,
    88                                                       Liquidations,
    89                                                   ) = mk.MarketActivity(
    90                                                       pop,
    91                                                       CurrentPrice,
    92                                                       asset_supply,
    93                                                       dividend,
    94                                                       dividend_history,
    95                                                       spoils,
    96                                                       ToLiquidate,
    97                                                       random_dividend_history
    98                                                   )
    99                                                   '''
   100     10000      48031.0      4.8      0.8          dividend, random_dividend = mk.draw_dividend(dividend, random_dividend_history)
   101     10000     318977.0     31.9      5.5          pop, volume, spoils, Liquidations = mk.execute_ed(pop, CurrentPrice, asset_supply, spoils, ToLiquidate)
   102     10000     264361.0     26.4      4.6          pop = mk.earnings(pop, dividend)
   103     10000      15179.0      1.5      0.3          dividend_history.append(dividend)
   104     10000      53640.0      5.4      0.9          pop = mk.update_margin(pop, CurrentPrice)
   105     10000      48424.0      4.8      0.8          pop = mk.clear_debt(pop, CurrentPrice)
   106                                           
   107     10000      57263.0      5.7      1.0          pop, replace = bsc.UpdateWealthProfitAge(pop, CurrentPrice)
   108     10000      16352.0      1.6      0.3          pop = bsc.UpdateQuarterlyWealth(pop, generation)
   109     10000     410468.0     41.0      7.1          pop = bsc.UpdateWealthSeries(pop)
   110                                           
   111     10000    1108825.0    110.9     19.3          pop = iv.Emp_Investment(pop)
   112     10000      14417.0      1.4      0.3          AvgT, PropSignif, HighestT, AvgAbsT = 0, 0, 0, 0
   113                                           
   114                                                   # Record results 
   115     20000     388395.0     19.4      6.7          results, sim_break = data.record_results(
   116     10000      13219.0      1.3      0.2              results,
   117     10000      13068.0      1.3      0.2              generation,
   118     10000      12978.0      1.3      0.2              CurrentPrice,
   119     10000      12927.0      1.3      0.2              mismatch,
   120     10000      12973.0      1.3      0.2              dividend,
   121     10000      13044.0      1.3      0.2              random_dividend,
   122     10000      12990.0      1.3      0.2              volume,
   123     10000      13040.0      1.3      0.2              replacements,
   124     10000      13081.0      1.3      0.2              pop,
   125     10000      13079.0      1.3      0.2              spoils,
   126     10000      13171.0      1.3      0.2              Liquidations,
   127     10000      13202.0      1.3      0.2              asset_supply,
   128                                                       #CountSelected,
   129                                                       #CountMutated,
   130                                                       #CountCrossed,
   131                                                       #StratFlow,
   132     10000      13131.0      1.3      0.2              AvgT,
   133     10000      13097.0      1.3      0.2              PropSignif,
   134     10000      13106.0      1.3      0.2              HighestT,
   135     10000      13092.0      1.3      0.2              AvgAbsT,
   136                                                   )
   137                                           
   138     10000      14449.0      1.4      0.3          if sim_break == True:
   139                                                       warnings.warn('Simulation break: one of the 3 strategy types is extinct.')
   140                                                       break
   141                                           
   142         1          3.0      3.0      0.0      if generation < MAX_GENERATIONS - data.Barr:
   143         1          6.0      6.0      0.0          results = results[0:generation+1]
   144                                           
   145         1       1291.0   1291.0      0.0      df = pd.DataFrame(results, columns=data.columns)
   146                                           
   147         1          2.0      2.0      0.0      return df, pop

